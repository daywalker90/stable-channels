// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: primitives.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

enum Cln_ChannelSide: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case local // = 0
  case remote // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .local
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .local
    case 1: self = .remote
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .local: return 0
    case .remote: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Cln_ChannelSide] = [
    .local,
    .remote,
  ]

}

enum Cln_ChannelState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case openingd // = 0
  case channeldAwaitingLockin // = 1
  case channeldNormal // = 2
  case channeldShuttingDown // = 3
  case closingdSigexchange // = 4
  case closingdComplete // = 5
  case awaitingUnilateral // = 6
  case fundingSpendSeen // = 7
  case onchain // = 8
  case dualopendOpenInit // = 9
  case dualopendAwaitingLockin // = 10
  case UNRECOGNIZED(Int)

  init() {
    self = .openingd
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .openingd
    case 1: self = .channeldAwaitingLockin
    case 2: self = .channeldNormal
    case 3: self = .channeldShuttingDown
    case 4: self = .closingdSigexchange
    case 5: self = .closingdComplete
    case 6: self = .awaitingUnilateral
    case 7: self = .fundingSpendSeen
    case 8: self = .onchain
    case 9: self = .dualopendOpenInit
    case 10: self = .dualopendAwaitingLockin
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .openingd: return 0
    case .channeldAwaitingLockin: return 1
    case .channeldNormal: return 2
    case .channeldShuttingDown: return 3
    case .closingdSigexchange: return 4
    case .closingdComplete: return 5
    case .awaitingUnilateral: return 6
    case .fundingSpendSeen: return 7
    case .onchain: return 8
    case .dualopendOpenInit: return 9
    case .dualopendAwaitingLockin: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Cln_ChannelState] = [
    .openingd,
    .channeldAwaitingLockin,
    .channeldNormal,
    .channeldShuttingDown,
    .closingdSigexchange,
    .closingdComplete,
    .awaitingUnilateral,
    .fundingSpendSeen,
    .onchain,
    .dualopendOpenInit,
    .dualopendAwaitingLockin,
  ]

}

enum Cln_HtlcState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case sentAddHtlc // = 0
  case sentAddCommit // = 1
  case rcvdAddRevocation // = 2
  case rcvdAddAckCommit // = 3
  case sentAddAckRevocation // = 4
  case rcvdAddAckRevocation // = 5
  case rcvdRemoveHtlc // = 6
  case rcvdRemoveCommit // = 7
  case sentRemoveRevocation // = 8
  case sentRemoveAckCommit // = 9
  case rcvdRemoveAckRevocation // = 10
  case rcvdAddHtlc // = 11
  case rcvdAddCommit // = 12
  case sentAddRevocation // = 13
  case sentAddAckCommit // = 14
  case sentRemoveHtlc // = 15
  case sentRemoveCommit // = 16
  case rcvdRemoveRevocation // = 17
  case rcvdRemoveAckCommit // = 18
  case sentRemoveAckRevocation // = 19
  case UNRECOGNIZED(Int)

  init() {
    self = .sentAddHtlc
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .sentAddHtlc
    case 1: self = .sentAddCommit
    case 2: self = .rcvdAddRevocation
    case 3: self = .rcvdAddAckCommit
    case 4: self = .sentAddAckRevocation
    case 5: self = .rcvdAddAckRevocation
    case 6: self = .rcvdRemoveHtlc
    case 7: self = .rcvdRemoveCommit
    case 8: self = .sentRemoveRevocation
    case 9: self = .sentRemoveAckCommit
    case 10: self = .rcvdRemoveAckRevocation
    case 11: self = .rcvdAddHtlc
    case 12: self = .rcvdAddCommit
    case 13: self = .sentAddRevocation
    case 14: self = .sentAddAckCommit
    case 15: self = .sentRemoveHtlc
    case 16: self = .sentRemoveCommit
    case 17: self = .rcvdRemoveRevocation
    case 18: self = .rcvdRemoveAckCommit
    case 19: self = .sentRemoveAckRevocation
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .sentAddHtlc: return 0
    case .sentAddCommit: return 1
    case .rcvdAddRevocation: return 2
    case .rcvdAddAckCommit: return 3
    case .sentAddAckRevocation: return 4
    case .rcvdAddAckRevocation: return 5
    case .rcvdRemoveHtlc: return 6
    case .rcvdRemoveCommit: return 7
    case .sentRemoveRevocation: return 8
    case .sentRemoveAckCommit: return 9
    case .rcvdRemoveAckRevocation: return 10
    case .rcvdAddHtlc: return 11
    case .rcvdAddCommit: return 12
    case .sentAddRevocation: return 13
    case .sentAddAckCommit: return 14
    case .sentRemoveHtlc: return 15
    case .sentRemoveCommit: return 16
    case .rcvdRemoveRevocation: return 17
    case .rcvdRemoveAckCommit: return 18
    case .sentRemoveAckRevocation: return 19
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Cln_HtlcState] = [
    .sentAddHtlc,
    .sentAddCommit,
    .rcvdAddRevocation,
    .rcvdAddAckCommit,
    .sentAddAckRevocation,
    .rcvdAddAckRevocation,
    .rcvdRemoveHtlc,
    .rcvdRemoveCommit,
    .sentRemoveRevocation,
    .sentRemoveAckCommit,
    .rcvdRemoveAckRevocation,
    .rcvdAddHtlc,
    .rcvdAddCommit,
    .sentAddRevocation,
    .sentAddAckCommit,
    .sentRemoveHtlc,
    .sentRemoveCommit,
    .rcvdRemoveRevocation,
    .rcvdRemoveAckCommit,
    .sentRemoveAckRevocation,
  ]

}

struct Cln_Amount: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var msat: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cln_AmountOrAll: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Cln_AmountOrAll.OneOf_Value? = nil

  var amount: Cln_Amount {
    get {
      if case .amount(let v)? = value {return v}
      return Cln_Amount()
    }
    set {value = .amount(newValue)}
  }

  var all: Bool {
    get {
      if case .all(let v)? = value {return v}
      return false
    }
    set {value = .all(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable, Sendable {
    case amount(Cln_Amount)
    case all(Bool)

  }

  init() {}
}

struct Cln_AmountOrAny: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Cln_AmountOrAny.OneOf_Value? = nil

  var amount: Cln_Amount {
    get {
      if case .amount(let v)? = value {return v}
      return Cln_Amount()
    }
    set {value = .amount(newValue)}
  }

  var any: Bool {
    get {
      if case .any(let v)? = value {return v}
      return false
    }
    set {value = .any(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable, Sendable {
    case amount(Cln_Amount)
    case any(Bool)

  }

  init() {}
}

struct Cln_ChannelStateChangeCause: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cln_Outpoint: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var txid: Data = Data()

  var outnum: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cln_Feerate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var style: Cln_Feerate.OneOf_Style? = nil

  var slow: Bool {
    get {
      if case .slow(let v)? = style {return v}
      return false
    }
    set {style = .slow(newValue)}
  }

  var normal: Bool {
    get {
      if case .normal(let v)? = style {return v}
      return false
    }
    set {style = .normal(newValue)}
  }

  var urgent: Bool {
    get {
      if case .urgent(let v)? = style {return v}
      return false
    }
    set {style = .urgent(newValue)}
  }

  var perkb: UInt32 {
    get {
      if case .perkb(let v)? = style {return v}
      return 0
    }
    set {style = .perkb(newValue)}
  }

  var perkw: UInt32 {
    get {
      if case .perkw(let v)? = style {return v}
      return 0
    }
    set {style = .perkw(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Style: Equatable, Sendable {
    case slow(Bool)
    case normal(Bool)
    case urgent(Bool)
    case perkb(UInt32)
    case perkw(UInt32)

  }

  init() {}
}

struct Cln_OutputDesc: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var amount: Cln_Amount {
    get {return _amount ?? Cln_Amount()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cln_Amount? = nil
}

struct Cln_RouteHop: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Data = Data()

  var shortChannelID: String = String()

  var feebase: Cln_Amount {
    get {return _feebase ?? Cln_Amount()}
    set {_feebase = newValue}
  }
  /// Returns true if `feebase` has been explicitly set.
  var hasFeebase: Bool {return self._feebase != nil}
  /// Clears the value of `feebase`. Subsequent reads from it will return its default value.
  mutating func clearFeebase() {self._feebase = nil}

  var feeprop: UInt32 = 0

  var expirydelta: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _feebase: Cln_Amount? = nil
}

struct Cln_Routehint: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hops: [Cln_RouteHop] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cln_RoutehintList: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hints: [Cln_Routehint] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cln_TlvEntry: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: UInt64 = 0

  var value: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cln_TlvStream: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entries: [Cln_TlvEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cln"

extension Cln_ChannelSide: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOCAL"),
    1: .same(proto: "REMOTE"),
  ]
}

extension Cln_ChannelState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Openingd"),
    1: .same(proto: "ChanneldAwaitingLockin"),
    2: .same(proto: "ChanneldNormal"),
    3: .same(proto: "ChanneldShuttingDown"),
    4: .same(proto: "ClosingdSigexchange"),
    5: .same(proto: "ClosingdComplete"),
    6: .same(proto: "AwaitingUnilateral"),
    7: .same(proto: "FundingSpendSeen"),
    8: .same(proto: "Onchain"),
    9: .same(proto: "DualopendOpenInit"),
    10: .same(proto: "DualopendAwaitingLockin"),
  ]
}

extension Cln_HtlcState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SentAddHtlc"),
    1: .same(proto: "SentAddCommit"),
    2: .same(proto: "RcvdAddRevocation"),
    3: .same(proto: "RcvdAddAckCommit"),
    4: .same(proto: "SentAddAckRevocation"),
    5: .same(proto: "RcvdAddAckRevocation"),
    6: .same(proto: "RcvdRemoveHtlc"),
    7: .same(proto: "RcvdRemoveCommit"),
    8: .same(proto: "SentRemoveRevocation"),
    9: .same(proto: "SentRemoveAckCommit"),
    10: .same(proto: "RcvdRemoveAckRevocation"),
    11: .same(proto: "RCVD_ADD_HTLC"),
    12: .same(proto: "RCVD_ADD_COMMIT"),
    13: .same(proto: "SENT_ADD_REVOCATION"),
    14: .same(proto: "SENT_ADD_ACK_COMMIT"),
    15: .same(proto: "SENT_REMOVE_HTLC"),
    16: .same(proto: "SENT_REMOVE_COMMIT"),
    17: .same(proto: "RCVD_REMOVE_REVOCATION"),
    18: .same(proto: "RCVD_REMOVE_ACK_COMMIT"),
    19: .same(proto: "SENT_REMOVE_ACK_REVOCATION"),
  ]
}

extension Cln_Amount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Amount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "msat"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.msat) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.msat != 0 {
      try visitor.visitSingularUInt64Field(value: self.msat, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cln_Amount, rhs: Cln_Amount) -> Bool {
    if lhs.msat != rhs.msat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cln_AmountOrAll: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AmountOrAll"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .same(proto: "all"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Cln_Amount?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .amount(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .amount(v)
        }
      }()
      case 2: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .all(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.value {
    case .amount?: try {
      guard case .amount(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .all?: try {
      guard case .all(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cln_AmountOrAll, rhs: Cln_AmountOrAll) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cln_AmountOrAny: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AmountOrAny"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .same(proto: "any"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Cln_Amount?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .amount(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .amount(v)
        }
      }()
      case 2: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .any(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.value {
    case .amount?: try {
      guard case .amount(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .any?: try {
      guard case .any(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cln_AmountOrAny, rhs: Cln_AmountOrAny) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cln_ChannelStateChangeCause: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChannelStateChangeCause"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cln_ChannelStateChangeCause, rhs: Cln_ChannelStateChangeCause) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cln_Outpoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Outpoint"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "txid"),
    2: .same(proto: "outnum"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.txid) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.outnum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.txid.isEmpty {
      try visitor.visitSingularBytesField(value: self.txid, fieldNumber: 1)
    }
    if self.outnum != 0 {
      try visitor.visitSingularUInt32Field(value: self.outnum, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cln_Outpoint, rhs: Cln_Outpoint) -> Bool {
    if lhs.txid != rhs.txid {return false}
    if lhs.outnum != rhs.outnum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cln_Feerate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Feerate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "slow"),
    2: .same(proto: "normal"),
    3: .same(proto: "urgent"),
    4: .same(proto: "perkb"),
    5: .same(proto: "perkw"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.style != nil {try decoder.handleConflictingOneOf()}
          self.style = .slow(v)
        }
      }()
      case 2: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.style != nil {try decoder.handleConflictingOneOf()}
          self.style = .normal(v)
        }
      }()
      case 3: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.style != nil {try decoder.handleConflictingOneOf()}
          self.style = .urgent(v)
        }
      }()
      case 4: try {
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if let v = v {
          if self.style != nil {try decoder.handleConflictingOneOf()}
          self.style = .perkb(v)
        }
      }()
      case 5: try {
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if let v = v {
          if self.style != nil {try decoder.handleConflictingOneOf()}
          self.style = .perkw(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.style {
    case .slow?: try {
      guard case .slow(let v)? = self.style else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }()
    case .normal?: try {
      guard case .normal(let v)? = self.style else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }()
    case .urgent?: try {
      guard case .urgent(let v)? = self.style else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }()
    case .perkb?: try {
      guard case .perkb(let v)? = self.style else { preconditionFailure() }
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }()
    case .perkw?: try {
      guard case .perkw(let v)? = self.style else { preconditionFailure() }
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cln_Feerate, rhs: Cln_Feerate) -> Bool {
    if lhs.style != rhs.style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cln_OutputDesc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OutputDesc"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cln_OutputDesc, rhs: Cln_OutputDesc) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cln_RouteHop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RouteHop"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "short_channel_id"),
    3: .same(proto: "feebase"),
    4: .same(proto: "feeprop"),
    5: .same(proto: "expirydelta"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.shortChannelID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._feebase) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.feeprop) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.expirydelta) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    if !self.shortChannelID.isEmpty {
      try visitor.visitSingularStringField(value: self.shortChannelID, fieldNumber: 2)
    }
    try { if let v = self._feebase {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.feeprop != 0 {
      try visitor.visitSingularUInt32Field(value: self.feeprop, fieldNumber: 4)
    }
    if self.expirydelta != 0 {
      try visitor.visitSingularUInt32Field(value: self.expirydelta, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cln_RouteHop, rhs: Cln_RouteHop) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.shortChannelID != rhs.shortChannelID {return false}
    if lhs._feebase != rhs._feebase {return false}
    if lhs.feeprop != rhs.feeprop {return false}
    if lhs.expirydelta != rhs.expirydelta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cln_Routehint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Routehint"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hops"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.hops) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hops.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hops, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cln_Routehint, rhs: Cln_Routehint) -> Bool {
    if lhs.hops != rhs.hops {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cln_RoutehintList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RoutehintList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "hints"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.hints) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hints, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cln_RoutehintList, rhs: Cln_RoutehintList) -> Bool {
    if lhs.hints != rhs.hints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cln_TlvEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TlvEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.type) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != 0 {
      try visitor.visitSingularUInt64Field(value: self.type, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cln_TlvEntry, rhs: Cln_TlvEntry) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cln_TlvStream: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TlvStream"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cln_TlvStream, rhs: Cln_TlvStream) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
