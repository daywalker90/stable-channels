//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: node.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Cln_NodeClient`, then call methods of this protocol to make API calls.
internal protocol Cln_NodeClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cln_NodeClientInterceptorFactoryProtocol? { get }

  func getinfo(
    _ request: Cln_GetinfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_GetinfoRequest, Cln_GetinfoResponse>

  func listPeers(
    _ request: Cln_ListpeersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_ListpeersRequest, Cln_ListpeersResponse>

  func listFunds(
    _ request: Cln_ListfundsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_ListfundsRequest, Cln_ListfundsResponse>

  func sendPay(
    _ request: Cln_SendpayRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_SendpayRequest, Cln_SendpayResponse>

  func listChannels(
    _ request: Cln_ListchannelsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_ListchannelsRequest, Cln_ListchannelsResponse>

  func addGossip(
    _ request: Cln_AddgossipRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_AddgossipRequest, Cln_AddgossipResponse>

  func autoCleanInvoice(
    _ request: Cln_AutocleaninvoiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_AutocleaninvoiceRequest, Cln_AutocleaninvoiceResponse>

  func checkMessage(
    _ request: Cln_CheckmessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_CheckmessageRequest, Cln_CheckmessageResponse>

  func close(
    _ request: Cln_CloseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_CloseRequest, Cln_CloseResponse>

  func connectPeer(
    _ request: Cln_ConnectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_ConnectRequest, Cln_ConnectResponse>

  func createInvoice(
    _ request: Cln_CreateinvoiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_CreateinvoiceRequest, Cln_CreateinvoiceResponse>

  func datastore(
    _ request: Cln_DatastoreRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_DatastoreRequest, Cln_DatastoreResponse>

  func createOnion(
    _ request: Cln_CreateonionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_CreateonionRequest, Cln_CreateonionResponse>

  func delDatastore(
    _ request: Cln_DeldatastoreRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_DeldatastoreRequest, Cln_DeldatastoreResponse>

  func delExpiredInvoice(
    _ request: Cln_DelexpiredinvoiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_DelexpiredinvoiceRequest, Cln_DelexpiredinvoiceResponse>

  func delInvoice(
    _ request: Cln_DelinvoiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_DelinvoiceRequest, Cln_DelinvoiceResponse>

  func invoice(
    _ request: Cln_InvoiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_InvoiceRequest, Cln_InvoiceResponse>

  func listDatastore(
    _ request: Cln_ListdatastoreRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_ListdatastoreRequest, Cln_ListdatastoreResponse>

  func listInvoices(
    _ request: Cln_ListinvoicesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_ListinvoicesRequest, Cln_ListinvoicesResponse>

  func sendOnion(
    _ request: Cln_SendonionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_SendonionRequest, Cln_SendonionResponse>

  func listSendPays(
    _ request: Cln_ListsendpaysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_ListsendpaysRequest, Cln_ListsendpaysResponse>

  func listTransactions(
    _ request: Cln_ListtransactionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_ListtransactionsRequest, Cln_ListtransactionsResponse>

  func pay(
    _ request: Cln_PayRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_PayRequest, Cln_PayResponse>

  func listNodes(
    _ request: Cln_ListnodesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_ListnodesRequest, Cln_ListnodesResponse>

  func waitAnyInvoice(
    _ request: Cln_WaitanyinvoiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_WaitanyinvoiceRequest, Cln_WaitanyinvoiceResponse>

  func waitInvoice(
    _ request: Cln_WaitinvoiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_WaitinvoiceRequest, Cln_WaitinvoiceResponse>

  func waitSendPay(
    _ request: Cln_WaitsendpayRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_WaitsendpayRequest, Cln_WaitsendpayResponse>

  func newAddr(
    _ request: Cln_NewaddrRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_NewaddrRequest, Cln_NewaddrResponse>

  func withdraw(
    _ request: Cln_WithdrawRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_WithdrawRequest, Cln_WithdrawResponse>

  func keySend(
    _ request: Cln_KeysendRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_KeysendRequest, Cln_KeysendResponse>

  func fundPsbt(
    _ request: Cln_FundpsbtRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_FundpsbtRequest, Cln_FundpsbtResponse>

  func sendPsbt(
    _ request: Cln_SendpsbtRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_SendpsbtRequest, Cln_SendpsbtResponse>

  func signPsbt(
    _ request: Cln_SignpsbtRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_SignpsbtRequest, Cln_SignpsbtResponse>

  func utxoPsbt(
    _ request: Cln_UtxopsbtRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_UtxopsbtRequest, Cln_UtxopsbtResponse>

  func txDiscard(
    _ request: Cln_TxdiscardRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_TxdiscardRequest, Cln_TxdiscardResponse>

  func txPrepare(
    _ request: Cln_TxprepareRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_TxprepareRequest, Cln_TxprepareResponse>

  func txSend(
    _ request: Cln_TxsendRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_TxsendRequest, Cln_TxsendResponse>

  func listPeerChannels(
    _ request: Cln_ListpeerchannelsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_ListpeerchannelsRequest, Cln_ListpeerchannelsResponse>

  func listClosedChannels(
    _ request: Cln_ListclosedchannelsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_ListclosedchannelsRequest, Cln_ListclosedchannelsResponse>

  func decodePay(
    _ request: Cln_DecodepayRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_DecodepayRequest, Cln_DecodepayResponse>

  func decode(
    _ request: Cln_DecodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_DecodeRequest, Cln_DecodeResponse>

  func disconnect(
    _ request: Cln_DisconnectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_DisconnectRequest, Cln_DisconnectResponse>

  func feerates(
    _ request: Cln_FeeratesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_FeeratesRequest, Cln_FeeratesResponse>

  func fundChannel(
    _ request: Cln_FundchannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_FundchannelRequest, Cln_FundchannelResponse>

  func getRoute(
    _ request: Cln_GetrouteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_GetrouteRequest, Cln_GetrouteResponse>

  func listForwards(
    _ request: Cln_ListforwardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_ListforwardsRequest, Cln_ListforwardsResponse>

  func listPays(
    _ request: Cln_ListpaysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_ListpaysRequest, Cln_ListpaysResponse>

  func listHtlcs(
    _ request: Cln_ListhtlcsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_ListhtlcsRequest, Cln_ListhtlcsResponse>

  func ping(
    _ request: Cln_PingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_PingRequest, Cln_PingResponse>

  func sendCustomMsg(
    _ request: Cln_SendcustommsgRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_SendcustommsgRequest, Cln_SendcustommsgResponse>

  func setChannel(
    _ request: Cln_SetchannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_SetchannelRequest, Cln_SetchannelResponse>

  func signInvoice(
    _ request: Cln_SigninvoiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_SigninvoiceRequest, Cln_SigninvoiceResponse>

  func signMessage(
    _ request: Cln_SignmessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_SignmessageRequest, Cln_SignmessageResponse>

  func stop(
    _ request: Cln_StopRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_StopRequest, Cln_StopResponse>

  func preApproveKeysend(
    _ request: Cln_PreapprovekeysendRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_PreapprovekeysendRequest, Cln_PreapprovekeysendResponse>

  func preApproveInvoice(
    _ request: Cln_PreapproveinvoiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_PreapproveinvoiceRequest, Cln_PreapproveinvoiceResponse>

  func staticBackup(
    _ request: Cln_StaticbackupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cln_StaticbackupRequest, Cln_StaticbackupResponse>
}

extension Cln_NodeClientProtocol {
  internal var serviceName: String {
    return "cln.Node"
  }

  /// Unary call to Getinfo
  ///
  /// - Parameters:
  ///   - request: Request to send to Getinfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getinfo(
    _ request: Cln_GetinfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_GetinfoRequest, Cln_GetinfoResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.getinfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetinfoInterceptors() ?? []
    )
  }

  /// Unary call to ListPeers
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPeers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listPeers(
    _ request: Cln_ListpeersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_ListpeersRequest, Cln_ListpeersResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listPeers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPeersInterceptors() ?? []
    )
  }

  /// Unary call to ListFunds
  ///
  /// - Parameters:
  ///   - request: Request to send to ListFunds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listFunds(
    _ request: Cln_ListfundsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_ListfundsRequest, Cln_ListfundsResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listFunds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListFundsInterceptors() ?? []
    )
  }

  /// Unary call to SendPay
  ///
  /// - Parameters:
  ///   - request: Request to send to SendPay.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendPay(
    _ request: Cln_SendpayRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_SendpayRequest, Cln_SendpayResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.sendPay.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendPayInterceptors() ?? []
    )
  }

  /// Unary call to ListChannels
  ///
  /// - Parameters:
  ///   - request: Request to send to ListChannels.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listChannels(
    _ request: Cln_ListchannelsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_ListchannelsRequest, Cln_ListchannelsResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listChannels.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListChannelsInterceptors() ?? []
    )
  }

  /// Unary call to AddGossip
  ///
  /// - Parameters:
  ///   - request: Request to send to AddGossip.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addGossip(
    _ request: Cln_AddgossipRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_AddgossipRequest, Cln_AddgossipResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.addGossip.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddGossipInterceptors() ?? []
    )
  }

  /// Unary call to AutoCleanInvoice
  ///
  /// - Parameters:
  ///   - request: Request to send to AutoCleanInvoice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func autoCleanInvoice(
    _ request: Cln_AutocleaninvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_AutocleaninvoiceRequest, Cln_AutocleaninvoiceResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.autoCleanInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAutoCleanInvoiceInterceptors() ?? []
    )
  }

  /// Unary call to CheckMessage
  ///
  /// - Parameters:
  ///   - request: Request to send to CheckMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func checkMessage(
    _ request: Cln_CheckmessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_CheckmessageRequest, Cln_CheckmessageResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.checkMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckMessageInterceptors() ?? []
    )
  }

  /// Unary call to Close
  ///
  /// - Parameters:
  ///   - request: Request to send to Close.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func close(
    _ request: Cln_CloseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_CloseRequest, Cln_CloseResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.close.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseInterceptors() ?? []
    )
  }

  /// Unary call to ConnectPeer
  ///
  /// - Parameters:
  ///   - request: Request to send to ConnectPeer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func connectPeer(
    _ request: Cln_ConnectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_ConnectRequest, Cln_ConnectResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.connectPeer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectPeerInterceptors() ?? []
    )
  }

  /// Unary call to CreateInvoice
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateInvoice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createInvoice(
    _ request: Cln_CreateinvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_CreateinvoiceRequest, Cln_CreateinvoiceResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.createInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateInvoiceInterceptors() ?? []
    )
  }

  /// Unary call to Datastore
  ///
  /// - Parameters:
  ///   - request: Request to send to Datastore.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func datastore(
    _ request: Cln_DatastoreRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_DatastoreRequest, Cln_DatastoreResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.datastore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDatastoreInterceptors() ?? []
    )
  }

  /// Unary call to CreateOnion
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateOnion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createOnion(
    _ request: Cln_CreateonionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_CreateonionRequest, Cln_CreateonionResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.createOnion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateOnionInterceptors() ?? []
    )
  }

  /// Unary call to DelDatastore
  ///
  /// - Parameters:
  ///   - request: Request to send to DelDatastore.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delDatastore(
    _ request: Cln_DeldatastoreRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_DeldatastoreRequest, Cln_DeldatastoreResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.delDatastore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelDatastoreInterceptors() ?? []
    )
  }

  /// Unary call to DelExpiredInvoice
  ///
  /// - Parameters:
  ///   - request: Request to send to DelExpiredInvoice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delExpiredInvoice(
    _ request: Cln_DelexpiredinvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_DelexpiredinvoiceRequest, Cln_DelexpiredinvoiceResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.delExpiredInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelExpiredInvoiceInterceptors() ?? []
    )
  }

  /// Unary call to DelInvoice
  ///
  /// - Parameters:
  ///   - request: Request to send to DelInvoice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delInvoice(
    _ request: Cln_DelinvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_DelinvoiceRequest, Cln_DelinvoiceResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.delInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelInvoiceInterceptors() ?? []
    )
  }

  /// Unary call to Invoice
  ///
  /// - Parameters:
  ///   - request: Request to send to Invoice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func invoice(
    _ request: Cln_InvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_InvoiceRequest, Cln_InvoiceResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.invoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInvoiceInterceptors() ?? []
    )
  }

  /// Unary call to ListDatastore
  ///
  /// - Parameters:
  ///   - request: Request to send to ListDatastore.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listDatastore(
    _ request: Cln_ListdatastoreRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_ListdatastoreRequest, Cln_ListdatastoreResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listDatastore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListDatastoreInterceptors() ?? []
    )
  }

  /// Unary call to ListInvoices
  ///
  /// - Parameters:
  ///   - request: Request to send to ListInvoices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listInvoices(
    _ request: Cln_ListinvoicesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_ListinvoicesRequest, Cln_ListinvoicesResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listInvoices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInvoicesInterceptors() ?? []
    )
  }

  /// Unary call to SendOnion
  ///
  /// - Parameters:
  ///   - request: Request to send to SendOnion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendOnion(
    _ request: Cln_SendonionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_SendonionRequest, Cln_SendonionResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.sendOnion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendOnionInterceptors() ?? []
    )
  }

  /// Unary call to ListSendPays
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSendPays.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listSendPays(
    _ request: Cln_ListsendpaysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_ListsendpaysRequest, Cln_ListsendpaysResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listSendPays.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSendPaysInterceptors() ?? []
    )
  }

  /// Unary call to ListTransactions
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTransactions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listTransactions(
    _ request: Cln_ListtransactionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_ListtransactionsRequest, Cln_ListtransactionsResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listTransactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTransactionsInterceptors() ?? []
    )
  }

  /// Unary call to Pay
  ///
  /// - Parameters:
  ///   - request: Request to send to Pay.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pay(
    _ request: Cln_PayRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_PayRequest, Cln_PayResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.pay.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePayInterceptors() ?? []
    )
  }

  /// Unary call to ListNodes
  ///
  /// - Parameters:
  ///   - request: Request to send to ListNodes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listNodes(
    _ request: Cln_ListnodesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_ListnodesRequest, Cln_ListnodesResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listNodes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListNodesInterceptors() ?? []
    )
  }

  /// Unary call to WaitAnyInvoice
  ///
  /// - Parameters:
  ///   - request: Request to send to WaitAnyInvoice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func waitAnyInvoice(
    _ request: Cln_WaitanyinvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_WaitanyinvoiceRequest, Cln_WaitanyinvoiceResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.waitAnyInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWaitAnyInvoiceInterceptors() ?? []
    )
  }

  /// Unary call to WaitInvoice
  ///
  /// - Parameters:
  ///   - request: Request to send to WaitInvoice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func waitInvoice(
    _ request: Cln_WaitinvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_WaitinvoiceRequest, Cln_WaitinvoiceResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.waitInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWaitInvoiceInterceptors() ?? []
    )
  }

  /// Unary call to WaitSendPay
  ///
  /// - Parameters:
  ///   - request: Request to send to WaitSendPay.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func waitSendPay(
    _ request: Cln_WaitsendpayRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_WaitsendpayRequest, Cln_WaitsendpayResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.waitSendPay.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWaitSendPayInterceptors() ?? []
    )
  }

  /// Unary call to NewAddr
  ///
  /// - Parameters:
  ///   - request: Request to send to NewAddr.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func newAddr(
    _ request: Cln_NewaddrRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_NewaddrRequest, Cln_NewaddrResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.newAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewAddrInterceptors() ?? []
    )
  }

  /// Unary call to Withdraw
  ///
  /// - Parameters:
  ///   - request: Request to send to Withdraw.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdraw(
    _ request: Cln_WithdrawRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_WithdrawRequest, Cln_WithdrawResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.withdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawInterceptors() ?? []
    )
  }

  /// Unary call to KeySend
  ///
  /// - Parameters:
  ///   - request: Request to send to KeySend.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func keySend(
    _ request: Cln_KeysendRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_KeysendRequest, Cln_KeysendResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.keySend.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeySendInterceptors() ?? []
    )
  }

  /// Unary call to FundPsbt
  ///
  /// - Parameters:
  ///   - request: Request to send to FundPsbt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func fundPsbt(
    _ request: Cln_FundpsbtRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_FundpsbtRequest, Cln_FundpsbtResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.fundPsbt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFundPsbtInterceptors() ?? []
    )
  }

  /// Unary call to SendPsbt
  ///
  /// - Parameters:
  ///   - request: Request to send to SendPsbt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendPsbt(
    _ request: Cln_SendpsbtRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_SendpsbtRequest, Cln_SendpsbtResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.sendPsbt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendPsbtInterceptors() ?? []
    )
  }

  /// Unary call to SignPsbt
  ///
  /// - Parameters:
  ///   - request: Request to send to SignPsbt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signPsbt(
    _ request: Cln_SignpsbtRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_SignpsbtRequest, Cln_SignpsbtResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.signPsbt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignPsbtInterceptors() ?? []
    )
  }

  /// Unary call to UtxoPsbt
  ///
  /// - Parameters:
  ///   - request: Request to send to UtxoPsbt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func utxoPsbt(
    _ request: Cln_UtxopsbtRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_UtxopsbtRequest, Cln_UtxopsbtResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.utxoPsbt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUtxoPsbtInterceptors() ?? []
    )
  }

  /// Unary call to TxDiscard
  ///
  /// - Parameters:
  ///   - request: Request to send to TxDiscard.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func txDiscard(
    _ request: Cln_TxdiscardRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_TxdiscardRequest, Cln_TxdiscardResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.txDiscard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxDiscardInterceptors() ?? []
    )
  }

  /// Unary call to TxPrepare
  ///
  /// - Parameters:
  ///   - request: Request to send to TxPrepare.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func txPrepare(
    _ request: Cln_TxprepareRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_TxprepareRequest, Cln_TxprepareResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.txPrepare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxPrepareInterceptors() ?? []
    )
  }

  /// Unary call to TxSend
  ///
  /// - Parameters:
  ///   - request: Request to send to TxSend.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func txSend(
    _ request: Cln_TxsendRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_TxsendRequest, Cln_TxsendResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.txSend.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxSendInterceptors() ?? []
    )
  }

  /// Unary call to ListPeerChannels
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPeerChannels.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listPeerChannels(
    _ request: Cln_ListpeerchannelsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_ListpeerchannelsRequest, Cln_ListpeerchannelsResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listPeerChannels.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPeerChannelsInterceptors() ?? []
    )
  }

  /// Unary call to ListClosedChannels
  ///
  /// - Parameters:
  ///   - request: Request to send to ListClosedChannels.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listClosedChannels(
    _ request: Cln_ListclosedchannelsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_ListclosedchannelsRequest, Cln_ListclosedchannelsResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listClosedChannels.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListClosedChannelsInterceptors() ?? []
    )
  }

  /// Unary call to DecodePay
  ///
  /// - Parameters:
  ///   - request: Request to send to DecodePay.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func decodePay(
    _ request: Cln_DecodepayRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_DecodepayRequest, Cln_DecodepayResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.decodePay.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDecodePayInterceptors() ?? []
    )
  }

  /// Unary call to Decode
  ///
  /// - Parameters:
  ///   - request: Request to send to Decode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func decode(
    _ request: Cln_DecodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_DecodeRequest, Cln_DecodeResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.decode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDecodeInterceptors() ?? []
    )
  }

  /// Unary call to Disconnect
  ///
  /// - Parameters:
  ///   - request: Request to send to Disconnect.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func disconnect(
    _ request: Cln_DisconnectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_DisconnectRequest, Cln_DisconnectResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.disconnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisconnectInterceptors() ?? []
    )
  }

  /// Unary call to Feerates
  ///
  /// - Parameters:
  ///   - request: Request to send to Feerates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feerates(
    _ request: Cln_FeeratesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_FeeratesRequest, Cln_FeeratesResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.feerates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeratesInterceptors() ?? []
    )
  }

  /// Unary call to FundChannel
  ///
  /// - Parameters:
  ///   - request: Request to send to FundChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func fundChannel(
    _ request: Cln_FundchannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_FundchannelRequest, Cln_FundchannelResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.fundChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFundChannelInterceptors() ?? []
    )
  }

  /// Unary call to GetRoute
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRoute.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRoute(
    _ request: Cln_GetrouteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_GetrouteRequest, Cln_GetrouteResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.getRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRouteInterceptors() ?? []
    )
  }

  /// Unary call to ListForwards
  ///
  /// - Parameters:
  ///   - request: Request to send to ListForwards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listForwards(
    _ request: Cln_ListforwardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_ListforwardsRequest, Cln_ListforwardsResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listForwards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListForwardsInterceptors() ?? []
    )
  }

  /// Unary call to ListPays
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPays.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listPays(
    _ request: Cln_ListpaysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_ListpaysRequest, Cln_ListpaysResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listPays.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPaysInterceptors() ?? []
    )
  }

  /// Unary call to ListHtlcs
  ///
  /// - Parameters:
  ///   - request: Request to send to ListHtlcs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listHtlcs(
    _ request: Cln_ListhtlcsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_ListhtlcsRequest, Cln_ListhtlcsResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listHtlcs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListHtlcsInterceptors() ?? []
    )
  }

  /// Unary call to Ping
  ///
  /// - Parameters:
  ///   - request: Request to send to Ping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func ping(
    _ request: Cln_PingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_PingRequest, Cln_PingResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  /// Unary call to SendCustomMsg
  ///
  /// - Parameters:
  ///   - request: Request to send to SendCustomMsg.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendCustomMsg(
    _ request: Cln_SendcustommsgRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_SendcustommsgRequest, Cln_SendcustommsgResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.sendCustomMsg.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendCustomMsgInterceptors() ?? []
    )
  }

  /// Unary call to SetChannel
  ///
  /// - Parameters:
  ///   - request: Request to send to SetChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setChannel(
    _ request: Cln_SetchannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_SetchannelRequest, Cln_SetchannelResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.setChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetChannelInterceptors() ?? []
    )
  }

  /// Unary call to SignInvoice
  ///
  /// - Parameters:
  ///   - request: Request to send to SignInvoice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signInvoice(
    _ request: Cln_SigninvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_SigninvoiceRequest, Cln_SigninvoiceResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.signInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignInvoiceInterceptors() ?? []
    )
  }

  /// Unary call to SignMessage
  ///
  /// - Parameters:
  ///   - request: Request to send to SignMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signMessage(
    _ request: Cln_SignmessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_SignmessageRequest, Cln_SignmessageResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.signMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignMessageInterceptors() ?? []
    )
  }

  /// Unary call to Stop
  ///
  /// - Parameters:
  ///   - request: Request to send to Stop.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stop(
    _ request: Cln_StopRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_StopRequest, Cln_StopResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.stop.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopInterceptors() ?? []
    )
  }

  /// Unary call to PreApproveKeysend
  ///
  /// - Parameters:
  ///   - request: Request to send to PreApproveKeysend.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func preApproveKeysend(
    _ request: Cln_PreapprovekeysendRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_PreapprovekeysendRequest, Cln_PreapprovekeysendResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.preApproveKeysend.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePreApproveKeysendInterceptors() ?? []
    )
  }

  /// Unary call to PreApproveInvoice
  ///
  /// - Parameters:
  ///   - request: Request to send to PreApproveInvoice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func preApproveInvoice(
    _ request: Cln_PreapproveinvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_PreapproveinvoiceRequest, Cln_PreapproveinvoiceResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.preApproveInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePreApproveInvoiceInterceptors() ?? []
    )
  }

  /// Unary call to StaticBackup
  ///
  /// - Parameters:
  ///   - request: Request to send to StaticBackup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func staticBackup(
    _ request: Cln_StaticbackupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cln_StaticbackupRequest, Cln_StaticbackupResponse> {
    return self.makeUnaryCall(
      path: Cln_NodeClientMetadata.Methods.staticBackup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStaticBackupInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cln_NodeClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cln_NodeNIOClient")
internal final class Cln_NodeClient: Cln_NodeClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cln_NodeClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cln_NodeClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cln.Node service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cln_NodeClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cln_NodeNIOClient: Cln_NodeClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cln_NodeClientInterceptorFactoryProtocol?

  /// Creates a client for the cln.Node service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cln_NodeClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cln_NodeAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cln_NodeClientInterceptorFactoryProtocol? { get }

  func makeGetinfoCall(
    _ request: Cln_GetinfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_GetinfoRequest, Cln_GetinfoResponse>

  func makeListPeersCall(
    _ request: Cln_ListpeersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_ListpeersRequest, Cln_ListpeersResponse>

  func makeListFundsCall(
    _ request: Cln_ListfundsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_ListfundsRequest, Cln_ListfundsResponse>

  func makeSendPayCall(
    _ request: Cln_SendpayRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_SendpayRequest, Cln_SendpayResponse>

  func makeListChannelsCall(
    _ request: Cln_ListchannelsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_ListchannelsRequest, Cln_ListchannelsResponse>

  func makeAddGossipCall(
    _ request: Cln_AddgossipRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_AddgossipRequest, Cln_AddgossipResponse>

  func makeAutoCleanInvoiceCall(
    _ request: Cln_AutocleaninvoiceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_AutocleaninvoiceRequest, Cln_AutocleaninvoiceResponse>

  func makeCheckMessageCall(
    _ request: Cln_CheckmessageRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_CheckmessageRequest, Cln_CheckmessageResponse>

  func makeCloseCall(
    _ request: Cln_CloseRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_CloseRequest, Cln_CloseResponse>

  func makeConnectPeerCall(
    _ request: Cln_ConnectRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_ConnectRequest, Cln_ConnectResponse>

  func makeCreateInvoiceCall(
    _ request: Cln_CreateinvoiceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_CreateinvoiceRequest, Cln_CreateinvoiceResponse>

  func makeDatastoreCall(
    _ request: Cln_DatastoreRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_DatastoreRequest, Cln_DatastoreResponse>

  func makeCreateOnionCall(
    _ request: Cln_CreateonionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_CreateonionRequest, Cln_CreateonionResponse>

  func makeDelDatastoreCall(
    _ request: Cln_DeldatastoreRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_DeldatastoreRequest, Cln_DeldatastoreResponse>

  func makeDelExpiredInvoiceCall(
    _ request: Cln_DelexpiredinvoiceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_DelexpiredinvoiceRequest, Cln_DelexpiredinvoiceResponse>

  func makeDelInvoiceCall(
    _ request: Cln_DelinvoiceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_DelinvoiceRequest, Cln_DelinvoiceResponse>

  func makeInvoiceCall(
    _ request: Cln_InvoiceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_InvoiceRequest, Cln_InvoiceResponse>

  func makeListDatastoreCall(
    _ request: Cln_ListdatastoreRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_ListdatastoreRequest, Cln_ListdatastoreResponse>

  func makeListInvoicesCall(
    _ request: Cln_ListinvoicesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_ListinvoicesRequest, Cln_ListinvoicesResponse>

  func makeSendOnionCall(
    _ request: Cln_SendonionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_SendonionRequest, Cln_SendonionResponse>

  func makeListSendPaysCall(
    _ request: Cln_ListsendpaysRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_ListsendpaysRequest, Cln_ListsendpaysResponse>

  func makeListTransactionsCall(
    _ request: Cln_ListtransactionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_ListtransactionsRequest, Cln_ListtransactionsResponse>

  func makePayCall(
    _ request: Cln_PayRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_PayRequest, Cln_PayResponse>

  func makeListNodesCall(
    _ request: Cln_ListnodesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_ListnodesRequest, Cln_ListnodesResponse>

  func makeWaitAnyInvoiceCall(
    _ request: Cln_WaitanyinvoiceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_WaitanyinvoiceRequest, Cln_WaitanyinvoiceResponse>

  func makeWaitInvoiceCall(
    _ request: Cln_WaitinvoiceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_WaitinvoiceRequest, Cln_WaitinvoiceResponse>

  func makeWaitSendPayCall(
    _ request: Cln_WaitsendpayRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_WaitsendpayRequest, Cln_WaitsendpayResponse>

  func makeNewAddrCall(
    _ request: Cln_NewaddrRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_NewaddrRequest, Cln_NewaddrResponse>

  func makeWithdrawCall(
    _ request: Cln_WithdrawRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_WithdrawRequest, Cln_WithdrawResponse>

  func makeKeySendCall(
    _ request: Cln_KeysendRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_KeysendRequest, Cln_KeysendResponse>

  func makeFundPsbtCall(
    _ request: Cln_FundpsbtRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_FundpsbtRequest, Cln_FundpsbtResponse>

  func makeSendPsbtCall(
    _ request: Cln_SendpsbtRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_SendpsbtRequest, Cln_SendpsbtResponse>

  func makeSignPsbtCall(
    _ request: Cln_SignpsbtRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_SignpsbtRequest, Cln_SignpsbtResponse>

  func makeUtxoPsbtCall(
    _ request: Cln_UtxopsbtRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_UtxopsbtRequest, Cln_UtxopsbtResponse>

  func makeTxDiscardCall(
    _ request: Cln_TxdiscardRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_TxdiscardRequest, Cln_TxdiscardResponse>

  func makeTxPrepareCall(
    _ request: Cln_TxprepareRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_TxprepareRequest, Cln_TxprepareResponse>

  func makeTxSendCall(
    _ request: Cln_TxsendRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_TxsendRequest, Cln_TxsendResponse>

  func makeListPeerChannelsCall(
    _ request: Cln_ListpeerchannelsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_ListpeerchannelsRequest, Cln_ListpeerchannelsResponse>

  func makeListClosedChannelsCall(
    _ request: Cln_ListclosedchannelsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_ListclosedchannelsRequest, Cln_ListclosedchannelsResponse>

  func makeDecodePayCall(
    _ request: Cln_DecodepayRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_DecodepayRequest, Cln_DecodepayResponse>

  func makeDecodeCall(
    _ request: Cln_DecodeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_DecodeRequest, Cln_DecodeResponse>

  func makeDisconnectCall(
    _ request: Cln_DisconnectRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_DisconnectRequest, Cln_DisconnectResponse>

  func makeFeeratesCall(
    _ request: Cln_FeeratesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_FeeratesRequest, Cln_FeeratesResponse>

  func makeFundChannelCall(
    _ request: Cln_FundchannelRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_FundchannelRequest, Cln_FundchannelResponse>

  func makeGetRouteCall(
    _ request: Cln_GetrouteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_GetrouteRequest, Cln_GetrouteResponse>

  func makeListForwardsCall(
    _ request: Cln_ListforwardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_ListforwardsRequest, Cln_ListforwardsResponse>

  func makeListPaysCall(
    _ request: Cln_ListpaysRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_ListpaysRequest, Cln_ListpaysResponse>

  func makeListHtlcsCall(
    _ request: Cln_ListhtlcsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_ListhtlcsRequest, Cln_ListhtlcsResponse>

  func makePingCall(
    _ request: Cln_PingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_PingRequest, Cln_PingResponse>

  func makeSendCustomMsgCall(
    _ request: Cln_SendcustommsgRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_SendcustommsgRequest, Cln_SendcustommsgResponse>

  func makeSetChannelCall(
    _ request: Cln_SetchannelRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_SetchannelRequest, Cln_SetchannelResponse>

  func makeSignInvoiceCall(
    _ request: Cln_SigninvoiceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_SigninvoiceRequest, Cln_SigninvoiceResponse>

  func makeSignMessageCall(
    _ request: Cln_SignmessageRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_SignmessageRequest, Cln_SignmessageResponse>

  func makeStopCall(
    _ request: Cln_StopRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_StopRequest, Cln_StopResponse>

  func makePreApproveKeysendCall(
    _ request: Cln_PreapprovekeysendRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_PreapprovekeysendRequest, Cln_PreapprovekeysendResponse>

  func makePreApproveInvoiceCall(
    _ request: Cln_PreapproveinvoiceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_PreapproveinvoiceRequest, Cln_PreapproveinvoiceResponse>

  func makeStaticBackupCall(
    _ request: Cln_StaticbackupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cln_StaticbackupRequest, Cln_StaticbackupResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cln_NodeAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cln_NodeClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cln_NodeClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetinfoCall(
    _ request: Cln_GetinfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_GetinfoRequest, Cln_GetinfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.getinfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetinfoInterceptors() ?? []
    )
  }

  internal func makeListPeersCall(
    _ request: Cln_ListpeersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_ListpeersRequest, Cln_ListpeersResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listPeers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPeersInterceptors() ?? []
    )
  }

  internal func makeListFundsCall(
    _ request: Cln_ListfundsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_ListfundsRequest, Cln_ListfundsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listFunds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListFundsInterceptors() ?? []
    )
  }

  internal func makeSendPayCall(
    _ request: Cln_SendpayRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_SendpayRequest, Cln_SendpayResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.sendPay.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendPayInterceptors() ?? []
    )
  }

  internal func makeListChannelsCall(
    _ request: Cln_ListchannelsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_ListchannelsRequest, Cln_ListchannelsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listChannels.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListChannelsInterceptors() ?? []
    )
  }

  internal func makeAddGossipCall(
    _ request: Cln_AddgossipRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_AddgossipRequest, Cln_AddgossipResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.addGossip.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddGossipInterceptors() ?? []
    )
  }

  internal func makeAutoCleanInvoiceCall(
    _ request: Cln_AutocleaninvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_AutocleaninvoiceRequest, Cln_AutocleaninvoiceResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.autoCleanInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAutoCleanInvoiceInterceptors() ?? []
    )
  }

  internal func makeCheckMessageCall(
    _ request: Cln_CheckmessageRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_CheckmessageRequest, Cln_CheckmessageResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.checkMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckMessageInterceptors() ?? []
    )
  }

  internal func makeCloseCall(
    _ request: Cln_CloseRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_CloseRequest, Cln_CloseResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.close.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseInterceptors() ?? []
    )
  }

  internal func makeConnectPeerCall(
    _ request: Cln_ConnectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_ConnectRequest, Cln_ConnectResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.connectPeer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectPeerInterceptors() ?? []
    )
  }

  internal func makeCreateInvoiceCall(
    _ request: Cln_CreateinvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_CreateinvoiceRequest, Cln_CreateinvoiceResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.createInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateInvoiceInterceptors() ?? []
    )
  }

  internal func makeDatastoreCall(
    _ request: Cln_DatastoreRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_DatastoreRequest, Cln_DatastoreResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.datastore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDatastoreInterceptors() ?? []
    )
  }

  internal func makeCreateOnionCall(
    _ request: Cln_CreateonionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_CreateonionRequest, Cln_CreateonionResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.createOnion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateOnionInterceptors() ?? []
    )
  }

  internal func makeDelDatastoreCall(
    _ request: Cln_DeldatastoreRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_DeldatastoreRequest, Cln_DeldatastoreResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.delDatastore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelDatastoreInterceptors() ?? []
    )
  }

  internal func makeDelExpiredInvoiceCall(
    _ request: Cln_DelexpiredinvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_DelexpiredinvoiceRequest, Cln_DelexpiredinvoiceResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.delExpiredInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelExpiredInvoiceInterceptors() ?? []
    )
  }

  internal func makeDelInvoiceCall(
    _ request: Cln_DelinvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_DelinvoiceRequest, Cln_DelinvoiceResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.delInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelInvoiceInterceptors() ?? []
    )
  }

  internal func makeInvoiceCall(
    _ request: Cln_InvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_InvoiceRequest, Cln_InvoiceResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.invoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInvoiceInterceptors() ?? []
    )
  }

  internal func makeListDatastoreCall(
    _ request: Cln_ListdatastoreRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_ListdatastoreRequest, Cln_ListdatastoreResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listDatastore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListDatastoreInterceptors() ?? []
    )
  }

  internal func makeListInvoicesCall(
    _ request: Cln_ListinvoicesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_ListinvoicesRequest, Cln_ListinvoicesResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listInvoices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInvoicesInterceptors() ?? []
    )
  }

  internal func makeSendOnionCall(
    _ request: Cln_SendonionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_SendonionRequest, Cln_SendonionResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.sendOnion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendOnionInterceptors() ?? []
    )
  }

  internal func makeListSendPaysCall(
    _ request: Cln_ListsendpaysRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_ListsendpaysRequest, Cln_ListsendpaysResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listSendPays.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSendPaysInterceptors() ?? []
    )
  }

  internal func makeListTransactionsCall(
    _ request: Cln_ListtransactionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_ListtransactionsRequest, Cln_ListtransactionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listTransactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTransactionsInterceptors() ?? []
    )
  }

  internal func makePayCall(
    _ request: Cln_PayRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_PayRequest, Cln_PayResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.pay.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePayInterceptors() ?? []
    )
  }

  internal func makeListNodesCall(
    _ request: Cln_ListnodesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_ListnodesRequest, Cln_ListnodesResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listNodes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListNodesInterceptors() ?? []
    )
  }

  internal func makeWaitAnyInvoiceCall(
    _ request: Cln_WaitanyinvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_WaitanyinvoiceRequest, Cln_WaitanyinvoiceResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.waitAnyInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWaitAnyInvoiceInterceptors() ?? []
    )
  }

  internal func makeWaitInvoiceCall(
    _ request: Cln_WaitinvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_WaitinvoiceRequest, Cln_WaitinvoiceResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.waitInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWaitInvoiceInterceptors() ?? []
    )
  }

  internal func makeWaitSendPayCall(
    _ request: Cln_WaitsendpayRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_WaitsendpayRequest, Cln_WaitsendpayResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.waitSendPay.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWaitSendPayInterceptors() ?? []
    )
  }

  internal func makeNewAddrCall(
    _ request: Cln_NewaddrRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_NewaddrRequest, Cln_NewaddrResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.newAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewAddrInterceptors() ?? []
    )
  }

  internal func makeWithdrawCall(
    _ request: Cln_WithdrawRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_WithdrawRequest, Cln_WithdrawResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.withdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawInterceptors() ?? []
    )
  }

  internal func makeKeySendCall(
    _ request: Cln_KeysendRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_KeysendRequest, Cln_KeysendResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.keySend.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeySendInterceptors() ?? []
    )
  }

  internal func makeFundPsbtCall(
    _ request: Cln_FundpsbtRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_FundpsbtRequest, Cln_FundpsbtResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.fundPsbt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFundPsbtInterceptors() ?? []
    )
  }

  internal func makeSendPsbtCall(
    _ request: Cln_SendpsbtRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_SendpsbtRequest, Cln_SendpsbtResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.sendPsbt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendPsbtInterceptors() ?? []
    )
  }

  internal func makeSignPsbtCall(
    _ request: Cln_SignpsbtRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_SignpsbtRequest, Cln_SignpsbtResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.signPsbt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignPsbtInterceptors() ?? []
    )
  }

  internal func makeUtxoPsbtCall(
    _ request: Cln_UtxopsbtRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_UtxopsbtRequest, Cln_UtxopsbtResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.utxoPsbt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUtxoPsbtInterceptors() ?? []
    )
  }

  internal func makeTxDiscardCall(
    _ request: Cln_TxdiscardRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_TxdiscardRequest, Cln_TxdiscardResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.txDiscard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxDiscardInterceptors() ?? []
    )
  }

  internal func makeTxPrepareCall(
    _ request: Cln_TxprepareRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_TxprepareRequest, Cln_TxprepareResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.txPrepare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxPrepareInterceptors() ?? []
    )
  }

  internal func makeTxSendCall(
    _ request: Cln_TxsendRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_TxsendRequest, Cln_TxsendResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.txSend.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxSendInterceptors() ?? []
    )
  }

  internal func makeListPeerChannelsCall(
    _ request: Cln_ListpeerchannelsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_ListpeerchannelsRequest, Cln_ListpeerchannelsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listPeerChannels.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPeerChannelsInterceptors() ?? []
    )
  }

  internal func makeListClosedChannelsCall(
    _ request: Cln_ListclosedchannelsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_ListclosedchannelsRequest, Cln_ListclosedchannelsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listClosedChannels.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListClosedChannelsInterceptors() ?? []
    )
  }

  internal func makeDecodePayCall(
    _ request: Cln_DecodepayRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_DecodepayRequest, Cln_DecodepayResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.decodePay.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDecodePayInterceptors() ?? []
    )
  }

  internal func makeDecodeCall(
    _ request: Cln_DecodeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_DecodeRequest, Cln_DecodeResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.decode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDecodeInterceptors() ?? []
    )
  }

  internal func makeDisconnectCall(
    _ request: Cln_DisconnectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_DisconnectRequest, Cln_DisconnectResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.disconnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisconnectInterceptors() ?? []
    )
  }

  internal func makeFeeratesCall(
    _ request: Cln_FeeratesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_FeeratesRequest, Cln_FeeratesResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.feerates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeratesInterceptors() ?? []
    )
  }

  internal func makeFundChannelCall(
    _ request: Cln_FundchannelRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_FundchannelRequest, Cln_FundchannelResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.fundChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFundChannelInterceptors() ?? []
    )
  }

  internal func makeGetRouteCall(
    _ request: Cln_GetrouteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_GetrouteRequest, Cln_GetrouteResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.getRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRouteInterceptors() ?? []
    )
  }

  internal func makeListForwardsCall(
    _ request: Cln_ListforwardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_ListforwardsRequest, Cln_ListforwardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listForwards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListForwardsInterceptors() ?? []
    )
  }

  internal func makeListPaysCall(
    _ request: Cln_ListpaysRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_ListpaysRequest, Cln_ListpaysResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listPays.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPaysInterceptors() ?? []
    )
  }

  internal func makeListHtlcsCall(
    _ request: Cln_ListhtlcsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_ListhtlcsRequest, Cln_ListhtlcsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listHtlcs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListHtlcsInterceptors() ?? []
    )
  }

  internal func makePingCall(
    _ request: Cln_PingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_PingRequest, Cln_PingResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  internal func makeSendCustomMsgCall(
    _ request: Cln_SendcustommsgRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_SendcustommsgRequest, Cln_SendcustommsgResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.sendCustomMsg.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendCustomMsgInterceptors() ?? []
    )
  }

  internal func makeSetChannelCall(
    _ request: Cln_SetchannelRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_SetchannelRequest, Cln_SetchannelResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.setChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetChannelInterceptors() ?? []
    )
  }

  internal func makeSignInvoiceCall(
    _ request: Cln_SigninvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_SigninvoiceRequest, Cln_SigninvoiceResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.signInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignInvoiceInterceptors() ?? []
    )
  }

  internal func makeSignMessageCall(
    _ request: Cln_SignmessageRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_SignmessageRequest, Cln_SignmessageResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.signMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignMessageInterceptors() ?? []
    )
  }

  internal func makeStopCall(
    _ request: Cln_StopRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_StopRequest, Cln_StopResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.stop.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopInterceptors() ?? []
    )
  }

  internal func makePreApproveKeysendCall(
    _ request: Cln_PreapprovekeysendRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_PreapprovekeysendRequest, Cln_PreapprovekeysendResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.preApproveKeysend.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePreApproveKeysendInterceptors() ?? []
    )
  }

  internal func makePreApproveInvoiceCall(
    _ request: Cln_PreapproveinvoiceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_PreapproveinvoiceRequest, Cln_PreapproveinvoiceResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.preApproveInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePreApproveInvoiceInterceptors() ?? []
    )
  }

  internal func makeStaticBackupCall(
    _ request: Cln_StaticbackupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cln_StaticbackupRequest, Cln_StaticbackupResponse> {
    return self.makeAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.staticBackup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStaticBackupInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cln_NodeAsyncClientProtocol {
  internal func getinfo(
    _ request: Cln_GetinfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_GetinfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.getinfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetinfoInterceptors() ?? []
    )
  }

  internal func listPeers(
    _ request: Cln_ListpeersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_ListpeersResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listPeers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPeersInterceptors() ?? []
    )
  }

  internal func listFunds(
    _ request: Cln_ListfundsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_ListfundsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listFunds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListFundsInterceptors() ?? []
    )
  }

  internal func sendPay(
    _ request: Cln_SendpayRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_SendpayResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.sendPay.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendPayInterceptors() ?? []
    )
  }

  internal func listChannels(
    _ request: Cln_ListchannelsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_ListchannelsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listChannels.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListChannelsInterceptors() ?? []
    )
  }

  internal func addGossip(
    _ request: Cln_AddgossipRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_AddgossipResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.addGossip.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddGossipInterceptors() ?? []
    )
  }

  internal func autoCleanInvoice(
    _ request: Cln_AutocleaninvoiceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_AutocleaninvoiceResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.autoCleanInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAutoCleanInvoiceInterceptors() ?? []
    )
  }

  internal func checkMessage(
    _ request: Cln_CheckmessageRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_CheckmessageResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.checkMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckMessageInterceptors() ?? []
    )
  }

  internal func close(
    _ request: Cln_CloseRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_CloseResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.close.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseInterceptors() ?? []
    )
  }

  internal func connectPeer(
    _ request: Cln_ConnectRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_ConnectResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.connectPeer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectPeerInterceptors() ?? []
    )
  }

  internal func createInvoice(
    _ request: Cln_CreateinvoiceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_CreateinvoiceResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.createInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateInvoiceInterceptors() ?? []
    )
  }

  internal func datastore(
    _ request: Cln_DatastoreRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_DatastoreResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.datastore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDatastoreInterceptors() ?? []
    )
  }

  internal func createOnion(
    _ request: Cln_CreateonionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_CreateonionResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.createOnion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateOnionInterceptors() ?? []
    )
  }

  internal func delDatastore(
    _ request: Cln_DeldatastoreRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_DeldatastoreResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.delDatastore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelDatastoreInterceptors() ?? []
    )
  }

  internal func delExpiredInvoice(
    _ request: Cln_DelexpiredinvoiceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_DelexpiredinvoiceResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.delExpiredInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelExpiredInvoiceInterceptors() ?? []
    )
  }

  internal func delInvoice(
    _ request: Cln_DelinvoiceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_DelinvoiceResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.delInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelInvoiceInterceptors() ?? []
    )
  }

  internal func invoice(
    _ request: Cln_InvoiceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_InvoiceResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.invoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInvoiceInterceptors() ?? []
    )
  }

  internal func listDatastore(
    _ request: Cln_ListdatastoreRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_ListdatastoreResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listDatastore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListDatastoreInterceptors() ?? []
    )
  }

  internal func listInvoices(
    _ request: Cln_ListinvoicesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_ListinvoicesResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listInvoices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInvoicesInterceptors() ?? []
    )
  }

  internal func sendOnion(
    _ request: Cln_SendonionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_SendonionResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.sendOnion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendOnionInterceptors() ?? []
    )
  }

  internal func listSendPays(
    _ request: Cln_ListsendpaysRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_ListsendpaysResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listSendPays.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSendPaysInterceptors() ?? []
    )
  }

  internal func listTransactions(
    _ request: Cln_ListtransactionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_ListtransactionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listTransactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTransactionsInterceptors() ?? []
    )
  }

  internal func pay(
    _ request: Cln_PayRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_PayResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.pay.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePayInterceptors() ?? []
    )
  }

  internal func listNodes(
    _ request: Cln_ListnodesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_ListnodesResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listNodes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListNodesInterceptors() ?? []
    )
  }

  internal func waitAnyInvoice(
    _ request: Cln_WaitanyinvoiceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_WaitanyinvoiceResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.waitAnyInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWaitAnyInvoiceInterceptors() ?? []
    )
  }

  internal func waitInvoice(
    _ request: Cln_WaitinvoiceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_WaitinvoiceResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.waitInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWaitInvoiceInterceptors() ?? []
    )
  }

  internal func waitSendPay(
    _ request: Cln_WaitsendpayRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_WaitsendpayResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.waitSendPay.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWaitSendPayInterceptors() ?? []
    )
  }

  internal func newAddr(
    _ request: Cln_NewaddrRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_NewaddrResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.newAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewAddrInterceptors() ?? []
    )
  }

  internal func withdraw(
    _ request: Cln_WithdrawRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_WithdrawResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.withdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawInterceptors() ?? []
    )
  }

  internal func keySend(
    _ request: Cln_KeysendRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_KeysendResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.keySend.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeySendInterceptors() ?? []
    )
  }

  internal func fundPsbt(
    _ request: Cln_FundpsbtRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_FundpsbtResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.fundPsbt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFundPsbtInterceptors() ?? []
    )
  }

  internal func sendPsbt(
    _ request: Cln_SendpsbtRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_SendpsbtResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.sendPsbt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendPsbtInterceptors() ?? []
    )
  }

  internal func signPsbt(
    _ request: Cln_SignpsbtRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_SignpsbtResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.signPsbt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignPsbtInterceptors() ?? []
    )
  }

  internal func utxoPsbt(
    _ request: Cln_UtxopsbtRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_UtxopsbtResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.utxoPsbt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUtxoPsbtInterceptors() ?? []
    )
  }

  internal func txDiscard(
    _ request: Cln_TxdiscardRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_TxdiscardResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.txDiscard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxDiscardInterceptors() ?? []
    )
  }

  internal func txPrepare(
    _ request: Cln_TxprepareRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_TxprepareResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.txPrepare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxPrepareInterceptors() ?? []
    )
  }

  internal func txSend(
    _ request: Cln_TxsendRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_TxsendResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.txSend.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxSendInterceptors() ?? []
    )
  }

  internal func listPeerChannels(
    _ request: Cln_ListpeerchannelsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_ListpeerchannelsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listPeerChannels.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPeerChannelsInterceptors() ?? []
    )
  }

  internal func listClosedChannels(
    _ request: Cln_ListclosedchannelsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_ListclosedchannelsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listClosedChannels.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListClosedChannelsInterceptors() ?? []
    )
  }

  internal func decodePay(
    _ request: Cln_DecodepayRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_DecodepayResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.decodePay.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDecodePayInterceptors() ?? []
    )
  }

  internal func decode(
    _ request: Cln_DecodeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_DecodeResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.decode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDecodeInterceptors() ?? []
    )
  }

  internal func disconnect(
    _ request: Cln_DisconnectRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_DisconnectResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.disconnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisconnectInterceptors() ?? []
    )
  }

  internal func feerates(
    _ request: Cln_FeeratesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_FeeratesResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.feerates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeratesInterceptors() ?? []
    )
  }

  internal func fundChannel(
    _ request: Cln_FundchannelRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_FundchannelResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.fundChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFundChannelInterceptors() ?? []
    )
  }

  internal func getRoute(
    _ request: Cln_GetrouteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_GetrouteResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.getRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRouteInterceptors() ?? []
    )
  }

  internal func listForwards(
    _ request: Cln_ListforwardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_ListforwardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listForwards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListForwardsInterceptors() ?? []
    )
  }

  internal func listPays(
    _ request: Cln_ListpaysRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_ListpaysResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listPays.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPaysInterceptors() ?? []
    )
  }

  internal func listHtlcs(
    _ request: Cln_ListhtlcsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_ListhtlcsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.listHtlcs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListHtlcsInterceptors() ?? []
    )
  }

  internal func ping(
    _ request: Cln_PingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_PingResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  internal func sendCustomMsg(
    _ request: Cln_SendcustommsgRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_SendcustommsgResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.sendCustomMsg.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendCustomMsgInterceptors() ?? []
    )
  }

  internal func setChannel(
    _ request: Cln_SetchannelRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_SetchannelResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.setChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetChannelInterceptors() ?? []
    )
  }

  internal func signInvoice(
    _ request: Cln_SigninvoiceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_SigninvoiceResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.signInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignInvoiceInterceptors() ?? []
    )
  }

  internal func signMessage(
    _ request: Cln_SignmessageRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_SignmessageResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.signMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignMessageInterceptors() ?? []
    )
  }

  internal func stop(
    _ request: Cln_StopRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_StopResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.stop.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopInterceptors() ?? []
    )
  }

  internal func preApproveKeysend(
    _ request: Cln_PreapprovekeysendRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_PreapprovekeysendResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.preApproveKeysend.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePreApproveKeysendInterceptors() ?? []
    )
  }

  internal func preApproveInvoice(
    _ request: Cln_PreapproveinvoiceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_PreapproveinvoiceResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.preApproveInvoice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePreApproveInvoiceInterceptors() ?? []
    )
  }

  internal func staticBackup(
    _ request: Cln_StaticbackupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cln_StaticbackupResponse {
    return try await self.performAsyncUnaryCall(
      path: Cln_NodeClientMetadata.Methods.staticBackup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStaticBackupInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cln_NodeAsyncClient: Cln_NodeAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cln_NodeClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cln_NodeClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cln_NodeClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getinfo'.
  func makeGetinfoInterceptors() -> [ClientInterceptor<Cln_GetinfoRequest, Cln_GetinfoResponse>]

  /// - Returns: Interceptors to use when invoking 'listPeers'.
  func makeListPeersInterceptors() -> [ClientInterceptor<Cln_ListpeersRequest, Cln_ListpeersResponse>]

  /// - Returns: Interceptors to use when invoking 'listFunds'.
  func makeListFundsInterceptors() -> [ClientInterceptor<Cln_ListfundsRequest, Cln_ListfundsResponse>]

  /// - Returns: Interceptors to use when invoking 'sendPay'.
  func makeSendPayInterceptors() -> [ClientInterceptor<Cln_SendpayRequest, Cln_SendpayResponse>]

  /// - Returns: Interceptors to use when invoking 'listChannels'.
  func makeListChannelsInterceptors() -> [ClientInterceptor<Cln_ListchannelsRequest, Cln_ListchannelsResponse>]

  /// - Returns: Interceptors to use when invoking 'addGossip'.
  func makeAddGossipInterceptors() -> [ClientInterceptor<Cln_AddgossipRequest, Cln_AddgossipResponse>]

  /// - Returns: Interceptors to use when invoking 'autoCleanInvoice'.
  func makeAutoCleanInvoiceInterceptors() -> [ClientInterceptor<Cln_AutocleaninvoiceRequest, Cln_AutocleaninvoiceResponse>]

  /// - Returns: Interceptors to use when invoking 'checkMessage'.
  func makeCheckMessageInterceptors() -> [ClientInterceptor<Cln_CheckmessageRequest, Cln_CheckmessageResponse>]

  /// - Returns: Interceptors to use when invoking 'close'.
  func makeCloseInterceptors() -> [ClientInterceptor<Cln_CloseRequest, Cln_CloseResponse>]

  /// - Returns: Interceptors to use when invoking 'connectPeer'.
  func makeConnectPeerInterceptors() -> [ClientInterceptor<Cln_ConnectRequest, Cln_ConnectResponse>]

  /// - Returns: Interceptors to use when invoking 'createInvoice'.
  func makeCreateInvoiceInterceptors() -> [ClientInterceptor<Cln_CreateinvoiceRequest, Cln_CreateinvoiceResponse>]

  /// - Returns: Interceptors to use when invoking 'datastore'.
  func makeDatastoreInterceptors() -> [ClientInterceptor<Cln_DatastoreRequest, Cln_DatastoreResponse>]

  /// - Returns: Interceptors to use when invoking 'createOnion'.
  func makeCreateOnionInterceptors() -> [ClientInterceptor<Cln_CreateonionRequest, Cln_CreateonionResponse>]

  /// - Returns: Interceptors to use when invoking 'delDatastore'.
  func makeDelDatastoreInterceptors() -> [ClientInterceptor<Cln_DeldatastoreRequest, Cln_DeldatastoreResponse>]

  /// - Returns: Interceptors to use when invoking 'delExpiredInvoice'.
  func makeDelExpiredInvoiceInterceptors() -> [ClientInterceptor<Cln_DelexpiredinvoiceRequest, Cln_DelexpiredinvoiceResponse>]

  /// - Returns: Interceptors to use when invoking 'delInvoice'.
  func makeDelInvoiceInterceptors() -> [ClientInterceptor<Cln_DelinvoiceRequest, Cln_DelinvoiceResponse>]

  /// - Returns: Interceptors to use when invoking 'invoice'.
  func makeInvoiceInterceptors() -> [ClientInterceptor<Cln_InvoiceRequest, Cln_InvoiceResponse>]

  /// - Returns: Interceptors to use when invoking 'listDatastore'.
  func makeListDatastoreInterceptors() -> [ClientInterceptor<Cln_ListdatastoreRequest, Cln_ListdatastoreResponse>]

  /// - Returns: Interceptors to use when invoking 'listInvoices'.
  func makeListInvoicesInterceptors() -> [ClientInterceptor<Cln_ListinvoicesRequest, Cln_ListinvoicesResponse>]

  /// - Returns: Interceptors to use when invoking 'sendOnion'.
  func makeSendOnionInterceptors() -> [ClientInterceptor<Cln_SendonionRequest, Cln_SendonionResponse>]

  /// - Returns: Interceptors to use when invoking 'listSendPays'.
  func makeListSendPaysInterceptors() -> [ClientInterceptor<Cln_ListsendpaysRequest, Cln_ListsendpaysResponse>]

  /// - Returns: Interceptors to use when invoking 'listTransactions'.
  func makeListTransactionsInterceptors() -> [ClientInterceptor<Cln_ListtransactionsRequest, Cln_ListtransactionsResponse>]

  /// - Returns: Interceptors to use when invoking 'pay'.
  func makePayInterceptors() -> [ClientInterceptor<Cln_PayRequest, Cln_PayResponse>]

  /// - Returns: Interceptors to use when invoking 'listNodes'.
  func makeListNodesInterceptors() -> [ClientInterceptor<Cln_ListnodesRequest, Cln_ListnodesResponse>]

  /// - Returns: Interceptors to use when invoking 'waitAnyInvoice'.
  func makeWaitAnyInvoiceInterceptors() -> [ClientInterceptor<Cln_WaitanyinvoiceRequest, Cln_WaitanyinvoiceResponse>]

  /// - Returns: Interceptors to use when invoking 'waitInvoice'.
  func makeWaitInvoiceInterceptors() -> [ClientInterceptor<Cln_WaitinvoiceRequest, Cln_WaitinvoiceResponse>]

  /// - Returns: Interceptors to use when invoking 'waitSendPay'.
  func makeWaitSendPayInterceptors() -> [ClientInterceptor<Cln_WaitsendpayRequest, Cln_WaitsendpayResponse>]

  /// - Returns: Interceptors to use when invoking 'newAddr'.
  func makeNewAddrInterceptors() -> [ClientInterceptor<Cln_NewaddrRequest, Cln_NewaddrResponse>]

  /// - Returns: Interceptors to use when invoking 'withdraw'.
  func makeWithdrawInterceptors() -> [ClientInterceptor<Cln_WithdrawRequest, Cln_WithdrawResponse>]

  /// - Returns: Interceptors to use when invoking 'keySend'.
  func makeKeySendInterceptors() -> [ClientInterceptor<Cln_KeysendRequest, Cln_KeysendResponse>]

  /// - Returns: Interceptors to use when invoking 'fundPsbt'.
  func makeFundPsbtInterceptors() -> [ClientInterceptor<Cln_FundpsbtRequest, Cln_FundpsbtResponse>]

  /// - Returns: Interceptors to use when invoking 'sendPsbt'.
  func makeSendPsbtInterceptors() -> [ClientInterceptor<Cln_SendpsbtRequest, Cln_SendpsbtResponse>]

  /// - Returns: Interceptors to use when invoking 'signPsbt'.
  func makeSignPsbtInterceptors() -> [ClientInterceptor<Cln_SignpsbtRequest, Cln_SignpsbtResponse>]

  /// - Returns: Interceptors to use when invoking 'utxoPsbt'.
  func makeUtxoPsbtInterceptors() -> [ClientInterceptor<Cln_UtxopsbtRequest, Cln_UtxopsbtResponse>]

  /// - Returns: Interceptors to use when invoking 'txDiscard'.
  func makeTxDiscardInterceptors() -> [ClientInterceptor<Cln_TxdiscardRequest, Cln_TxdiscardResponse>]

  /// - Returns: Interceptors to use when invoking 'txPrepare'.
  func makeTxPrepareInterceptors() -> [ClientInterceptor<Cln_TxprepareRequest, Cln_TxprepareResponse>]

  /// - Returns: Interceptors to use when invoking 'txSend'.
  func makeTxSendInterceptors() -> [ClientInterceptor<Cln_TxsendRequest, Cln_TxsendResponse>]

  /// - Returns: Interceptors to use when invoking 'listPeerChannels'.
  func makeListPeerChannelsInterceptors() -> [ClientInterceptor<Cln_ListpeerchannelsRequest, Cln_ListpeerchannelsResponse>]

  /// - Returns: Interceptors to use when invoking 'listClosedChannels'.
  func makeListClosedChannelsInterceptors() -> [ClientInterceptor<Cln_ListclosedchannelsRequest, Cln_ListclosedchannelsResponse>]

  /// - Returns: Interceptors to use when invoking 'decodePay'.
  func makeDecodePayInterceptors() -> [ClientInterceptor<Cln_DecodepayRequest, Cln_DecodepayResponse>]

  /// - Returns: Interceptors to use when invoking 'decode'.
  func makeDecodeInterceptors() -> [ClientInterceptor<Cln_DecodeRequest, Cln_DecodeResponse>]

  /// - Returns: Interceptors to use when invoking 'disconnect'.
  func makeDisconnectInterceptors() -> [ClientInterceptor<Cln_DisconnectRequest, Cln_DisconnectResponse>]

  /// - Returns: Interceptors to use when invoking 'feerates'.
  func makeFeeratesInterceptors() -> [ClientInterceptor<Cln_FeeratesRequest, Cln_FeeratesResponse>]

  /// - Returns: Interceptors to use when invoking 'fundChannel'.
  func makeFundChannelInterceptors() -> [ClientInterceptor<Cln_FundchannelRequest, Cln_FundchannelResponse>]

  /// - Returns: Interceptors to use when invoking 'getRoute'.
  func makeGetRouteInterceptors() -> [ClientInterceptor<Cln_GetrouteRequest, Cln_GetrouteResponse>]

  /// - Returns: Interceptors to use when invoking 'listForwards'.
  func makeListForwardsInterceptors() -> [ClientInterceptor<Cln_ListforwardsRequest, Cln_ListforwardsResponse>]

  /// - Returns: Interceptors to use when invoking 'listPays'.
  func makeListPaysInterceptors() -> [ClientInterceptor<Cln_ListpaysRequest, Cln_ListpaysResponse>]

  /// - Returns: Interceptors to use when invoking 'listHtlcs'.
  func makeListHtlcsInterceptors() -> [ClientInterceptor<Cln_ListhtlcsRequest, Cln_ListhtlcsResponse>]

  /// - Returns: Interceptors to use when invoking 'ping'.
  func makePingInterceptors() -> [ClientInterceptor<Cln_PingRequest, Cln_PingResponse>]

  /// - Returns: Interceptors to use when invoking 'sendCustomMsg'.
  func makeSendCustomMsgInterceptors() -> [ClientInterceptor<Cln_SendcustommsgRequest, Cln_SendcustommsgResponse>]

  /// - Returns: Interceptors to use when invoking 'setChannel'.
  func makeSetChannelInterceptors() -> [ClientInterceptor<Cln_SetchannelRequest, Cln_SetchannelResponse>]

  /// - Returns: Interceptors to use when invoking 'signInvoice'.
  func makeSignInvoiceInterceptors() -> [ClientInterceptor<Cln_SigninvoiceRequest, Cln_SigninvoiceResponse>]

  /// - Returns: Interceptors to use when invoking 'signMessage'.
  func makeSignMessageInterceptors() -> [ClientInterceptor<Cln_SignmessageRequest, Cln_SignmessageResponse>]

  /// - Returns: Interceptors to use when invoking 'stop'.
  func makeStopInterceptors() -> [ClientInterceptor<Cln_StopRequest, Cln_StopResponse>]

  /// - Returns: Interceptors to use when invoking 'preApproveKeysend'.
  func makePreApproveKeysendInterceptors() -> [ClientInterceptor<Cln_PreapprovekeysendRequest, Cln_PreapprovekeysendResponse>]

  /// - Returns: Interceptors to use when invoking 'preApproveInvoice'.
  func makePreApproveInvoiceInterceptors() -> [ClientInterceptor<Cln_PreapproveinvoiceRequest, Cln_PreapproveinvoiceResponse>]

  /// - Returns: Interceptors to use when invoking 'staticBackup'.
  func makeStaticBackupInterceptors() -> [ClientInterceptor<Cln_StaticbackupRequest, Cln_StaticbackupResponse>]
}

internal enum Cln_NodeClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Node",
    fullName: "cln.Node",
    methods: [
      Cln_NodeClientMetadata.Methods.getinfo,
      Cln_NodeClientMetadata.Methods.listPeers,
      Cln_NodeClientMetadata.Methods.listFunds,
      Cln_NodeClientMetadata.Methods.sendPay,
      Cln_NodeClientMetadata.Methods.listChannels,
      Cln_NodeClientMetadata.Methods.addGossip,
      Cln_NodeClientMetadata.Methods.autoCleanInvoice,
      Cln_NodeClientMetadata.Methods.checkMessage,
      Cln_NodeClientMetadata.Methods.close,
      Cln_NodeClientMetadata.Methods.connectPeer,
      Cln_NodeClientMetadata.Methods.createInvoice,
      Cln_NodeClientMetadata.Methods.datastore,
      Cln_NodeClientMetadata.Methods.createOnion,
      Cln_NodeClientMetadata.Methods.delDatastore,
      Cln_NodeClientMetadata.Methods.delExpiredInvoice,
      Cln_NodeClientMetadata.Methods.delInvoice,
      Cln_NodeClientMetadata.Methods.invoice,
      Cln_NodeClientMetadata.Methods.listDatastore,
      Cln_NodeClientMetadata.Methods.listInvoices,
      Cln_NodeClientMetadata.Methods.sendOnion,
      Cln_NodeClientMetadata.Methods.listSendPays,
      Cln_NodeClientMetadata.Methods.listTransactions,
      Cln_NodeClientMetadata.Methods.pay,
      Cln_NodeClientMetadata.Methods.listNodes,
      Cln_NodeClientMetadata.Methods.waitAnyInvoice,
      Cln_NodeClientMetadata.Methods.waitInvoice,
      Cln_NodeClientMetadata.Methods.waitSendPay,
      Cln_NodeClientMetadata.Methods.newAddr,
      Cln_NodeClientMetadata.Methods.withdraw,
      Cln_NodeClientMetadata.Methods.keySend,
      Cln_NodeClientMetadata.Methods.fundPsbt,
      Cln_NodeClientMetadata.Methods.sendPsbt,
      Cln_NodeClientMetadata.Methods.signPsbt,
      Cln_NodeClientMetadata.Methods.utxoPsbt,
      Cln_NodeClientMetadata.Methods.txDiscard,
      Cln_NodeClientMetadata.Methods.txPrepare,
      Cln_NodeClientMetadata.Methods.txSend,
      Cln_NodeClientMetadata.Methods.listPeerChannels,
      Cln_NodeClientMetadata.Methods.listClosedChannels,
      Cln_NodeClientMetadata.Methods.decodePay,
      Cln_NodeClientMetadata.Methods.decode,
      Cln_NodeClientMetadata.Methods.disconnect,
      Cln_NodeClientMetadata.Methods.feerates,
      Cln_NodeClientMetadata.Methods.fundChannel,
      Cln_NodeClientMetadata.Methods.getRoute,
      Cln_NodeClientMetadata.Methods.listForwards,
      Cln_NodeClientMetadata.Methods.listPays,
      Cln_NodeClientMetadata.Methods.listHtlcs,
      Cln_NodeClientMetadata.Methods.ping,
      Cln_NodeClientMetadata.Methods.sendCustomMsg,
      Cln_NodeClientMetadata.Methods.setChannel,
      Cln_NodeClientMetadata.Methods.signInvoice,
      Cln_NodeClientMetadata.Methods.signMessage,
      Cln_NodeClientMetadata.Methods.stop,
      Cln_NodeClientMetadata.Methods.preApproveKeysend,
      Cln_NodeClientMetadata.Methods.preApproveInvoice,
      Cln_NodeClientMetadata.Methods.staticBackup,
    ]
  )

  internal enum Methods {
    internal static let getinfo = GRPCMethodDescriptor(
      name: "Getinfo",
      path: "/cln.Node/Getinfo",
      type: GRPCCallType.unary
    )

    internal static let listPeers = GRPCMethodDescriptor(
      name: "ListPeers",
      path: "/cln.Node/ListPeers",
      type: GRPCCallType.unary
    )

    internal static let listFunds = GRPCMethodDescriptor(
      name: "ListFunds",
      path: "/cln.Node/ListFunds",
      type: GRPCCallType.unary
    )

    internal static let sendPay = GRPCMethodDescriptor(
      name: "SendPay",
      path: "/cln.Node/SendPay",
      type: GRPCCallType.unary
    )

    internal static let listChannels = GRPCMethodDescriptor(
      name: "ListChannels",
      path: "/cln.Node/ListChannels",
      type: GRPCCallType.unary
    )

    internal static let addGossip = GRPCMethodDescriptor(
      name: "AddGossip",
      path: "/cln.Node/AddGossip",
      type: GRPCCallType.unary
    )

    internal static let autoCleanInvoice = GRPCMethodDescriptor(
      name: "AutoCleanInvoice",
      path: "/cln.Node/AutoCleanInvoice",
      type: GRPCCallType.unary
    )

    internal static let checkMessage = GRPCMethodDescriptor(
      name: "CheckMessage",
      path: "/cln.Node/CheckMessage",
      type: GRPCCallType.unary
    )

    internal static let close = GRPCMethodDescriptor(
      name: "Close",
      path: "/cln.Node/Close",
      type: GRPCCallType.unary
    )

    internal static let connectPeer = GRPCMethodDescriptor(
      name: "ConnectPeer",
      path: "/cln.Node/ConnectPeer",
      type: GRPCCallType.unary
    )

    internal static let createInvoice = GRPCMethodDescriptor(
      name: "CreateInvoice",
      path: "/cln.Node/CreateInvoice",
      type: GRPCCallType.unary
    )

    internal static let datastore = GRPCMethodDescriptor(
      name: "Datastore",
      path: "/cln.Node/Datastore",
      type: GRPCCallType.unary
    )

    internal static let createOnion = GRPCMethodDescriptor(
      name: "CreateOnion",
      path: "/cln.Node/CreateOnion",
      type: GRPCCallType.unary
    )

    internal static let delDatastore = GRPCMethodDescriptor(
      name: "DelDatastore",
      path: "/cln.Node/DelDatastore",
      type: GRPCCallType.unary
    )

    internal static let delExpiredInvoice = GRPCMethodDescriptor(
      name: "DelExpiredInvoice",
      path: "/cln.Node/DelExpiredInvoice",
      type: GRPCCallType.unary
    )

    internal static let delInvoice = GRPCMethodDescriptor(
      name: "DelInvoice",
      path: "/cln.Node/DelInvoice",
      type: GRPCCallType.unary
    )

    internal static let invoice = GRPCMethodDescriptor(
      name: "Invoice",
      path: "/cln.Node/Invoice",
      type: GRPCCallType.unary
    )

    internal static let listDatastore = GRPCMethodDescriptor(
      name: "ListDatastore",
      path: "/cln.Node/ListDatastore",
      type: GRPCCallType.unary
    )

    internal static let listInvoices = GRPCMethodDescriptor(
      name: "ListInvoices",
      path: "/cln.Node/ListInvoices",
      type: GRPCCallType.unary
    )

    internal static let sendOnion = GRPCMethodDescriptor(
      name: "SendOnion",
      path: "/cln.Node/SendOnion",
      type: GRPCCallType.unary
    )

    internal static let listSendPays = GRPCMethodDescriptor(
      name: "ListSendPays",
      path: "/cln.Node/ListSendPays",
      type: GRPCCallType.unary
    )

    internal static let listTransactions = GRPCMethodDescriptor(
      name: "ListTransactions",
      path: "/cln.Node/ListTransactions",
      type: GRPCCallType.unary
    )

    internal static let pay = GRPCMethodDescriptor(
      name: "Pay",
      path: "/cln.Node/Pay",
      type: GRPCCallType.unary
    )

    internal static let listNodes = GRPCMethodDescriptor(
      name: "ListNodes",
      path: "/cln.Node/ListNodes",
      type: GRPCCallType.unary
    )

    internal static let waitAnyInvoice = GRPCMethodDescriptor(
      name: "WaitAnyInvoice",
      path: "/cln.Node/WaitAnyInvoice",
      type: GRPCCallType.unary
    )

    internal static let waitInvoice = GRPCMethodDescriptor(
      name: "WaitInvoice",
      path: "/cln.Node/WaitInvoice",
      type: GRPCCallType.unary
    )

    internal static let waitSendPay = GRPCMethodDescriptor(
      name: "WaitSendPay",
      path: "/cln.Node/WaitSendPay",
      type: GRPCCallType.unary
    )

    internal static let newAddr = GRPCMethodDescriptor(
      name: "NewAddr",
      path: "/cln.Node/NewAddr",
      type: GRPCCallType.unary
    )

    internal static let withdraw = GRPCMethodDescriptor(
      name: "Withdraw",
      path: "/cln.Node/Withdraw",
      type: GRPCCallType.unary
    )

    internal static let keySend = GRPCMethodDescriptor(
      name: "KeySend",
      path: "/cln.Node/KeySend",
      type: GRPCCallType.unary
    )

    internal static let fundPsbt = GRPCMethodDescriptor(
      name: "FundPsbt",
      path: "/cln.Node/FundPsbt",
      type: GRPCCallType.unary
    )

    internal static let sendPsbt = GRPCMethodDescriptor(
      name: "SendPsbt",
      path: "/cln.Node/SendPsbt",
      type: GRPCCallType.unary
    )

    internal static let signPsbt = GRPCMethodDescriptor(
      name: "SignPsbt",
      path: "/cln.Node/SignPsbt",
      type: GRPCCallType.unary
    )

    internal static let utxoPsbt = GRPCMethodDescriptor(
      name: "UtxoPsbt",
      path: "/cln.Node/UtxoPsbt",
      type: GRPCCallType.unary
    )

    internal static let txDiscard = GRPCMethodDescriptor(
      name: "TxDiscard",
      path: "/cln.Node/TxDiscard",
      type: GRPCCallType.unary
    )

    internal static let txPrepare = GRPCMethodDescriptor(
      name: "TxPrepare",
      path: "/cln.Node/TxPrepare",
      type: GRPCCallType.unary
    )

    internal static let txSend = GRPCMethodDescriptor(
      name: "TxSend",
      path: "/cln.Node/TxSend",
      type: GRPCCallType.unary
    )

    internal static let listPeerChannels = GRPCMethodDescriptor(
      name: "ListPeerChannels",
      path: "/cln.Node/ListPeerChannels",
      type: GRPCCallType.unary
    )

    internal static let listClosedChannels = GRPCMethodDescriptor(
      name: "ListClosedChannels",
      path: "/cln.Node/ListClosedChannels",
      type: GRPCCallType.unary
    )

    internal static let decodePay = GRPCMethodDescriptor(
      name: "DecodePay",
      path: "/cln.Node/DecodePay",
      type: GRPCCallType.unary
    )

    internal static let decode = GRPCMethodDescriptor(
      name: "Decode",
      path: "/cln.Node/Decode",
      type: GRPCCallType.unary
    )

    internal static let disconnect = GRPCMethodDescriptor(
      name: "Disconnect",
      path: "/cln.Node/Disconnect",
      type: GRPCCallType.unary
    )

    internal static let feerates = GRPCMethodDescriptor(
      name: "Feerates",
      path: "/cln.Node/Feerates",
      type: GRPCCallType.unary
    )

    internal static let fundChannel = GRPCMethodDescriptor(
      name: "FundChannel",
      path: "/cln.Node/FundChannel",
      type: GRPCCallType.unary
    )

    internal static let getRoute = GRPCMethodDescriptor(
      name: "GetRoute",
      path: "/cln.Node/GetRoute",
      type: GRPCCallType.unary
    )

    internal static let listForwards = GRPCMethodDescriptor(
      name: "ListForwards",
      path: "/cln.Node/ListForwards",
      type: GRPCCallType.unary
    )

    internal static let listPays = GRPCMethodDescriptor(
      name: "ListPays",
      path: "/cln.Node/ListPays",
      type: GRPCCallType.unary
    )

    internal static let listHtlcs = GRPCMethodDescriptor(
      name: "ListHtlcs",
      path: "/cln.Node/ListHtlcs",
      type: GRPCCallType.unary
    )

    internal static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/cln.Node/Ping",
      type: GRPCCallType.unary
    )

    internal static let sendCustomMsg = GRPCMethodDescriptor(
      name: "SendCustomMsg",
      path: "/cln.Node/SendCustomMsg",
      type: GRPCCallType.unary
    )

    internal static let setChannel = GRPCMethodDescriptor(
      name: "SetChannel",
      path: "/cln.Node/SetChannel",
      type: GRPCCallType.unary
    )

    internal static let signInvoice = GRPCMethodDescriptor(
      name: "SignInvoice",
      path: "/cln.Node/SignInvoice",
      type: GRPCCallType.unary
    )

    internal static let signMessage = GRPCMethodDescriptor(
      name: "SignMessage",
      path: "/cln.Node/SignMessage",
      type: GRPCCallType.unary
    )

    internal static let stop = GRPCMethodDescriptor(
      name: "Stop",
      path: "/cln.Node/Stop",
      type: GRPCCallType.unary
    )

    internal static let preApproveKeysend = GRPCMethodDescriptor(
      name: "PreApproveKeysend",
      path: "/cln.Node/PreApproveKeysend",
      type: GRPCCallType.unary
    )

    internal static let preApproveInvoice = GRPCMethodDescriptor(
      name: "PreApproveInvoice",
      path: "/cln.Node/PreApproveInvoice",
      type: GRPCCallType.unary
    )

    internal static let staticBackup = GRPCMethodDescriptor(
      name: "StaticBackup",
      path: "/cln.Node/StaticBackup",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Cln_NodeProvider: CallHandlerProvider {
  var interceptors: Cln_NodeServerInterceptorFactoryProtocol? { get }

  func getinfo(request: Cln_GetinfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_GetinfoResponse>

  func listPeers(request: Cln_ListpeersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_ListpeersResponse>

  func listFunds(request: Cln_ListfundsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_ListfundsResponse>

  func sendPay(request: Cln_SendpayRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_SendpayResponse>

  func listChannels(request: Cln_ListchannelsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_ListchannelsResponse>

  func addGossip(request: Cln_AddgossipRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_AddgossipResponse>

  func autoCleanInvoice(request: Cln_AutocleaninvoiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_AutocleaninvoiceResponse>

  func checkMessage(request: Cln_CheckmessageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_CheckmessageResponse>

  func close(request: Cln_CloseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_CloseResponse>

  func connectPeer(request: Cln_ConnectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_ConnectResponse>

  func createInvoice(request: Cln_CreateinvoiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_CreateinvoiceResponse>

  func datastore(request: Cln_DatastoreRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_DatastoreResponse>

  func createOnion(request: Cln_CreateonionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_CreateonionResponse>

  func delDatastore(request: Cln_DeldatastoreRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_DeldatastoreResponse>

  func delExpiredInvoice(request: Cln_DelexpiredinvoiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_DelexpiredinvoiceResponse>

  func delInvoice(request: Cln_DelinvoiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_DelinvoiceResponse>

  func invoice(request: Cln_InvoiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_InvoiceResponse>

  func listDatastore(request: Cln_ListdatastoreRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_ListdatastoreResponse>

  func listInvoices(request: Cln_ListinvoicesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_ListinvoicesResponse>

  func sendOnion(request: Cln_SendonionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_SendonionResponse>

  func listSendPays(request: Cln_ListsendpaysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_ListsendpaysResponse>

  func listTransactions(request: Cln_ListtransactionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_ListtransactionsResponse>

  func pay(request: Cln_PayRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_PayResponse>

  func listNodes(request: Cln_ListnodesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_ListnodesResponse>

  func waitAnyInvoice(request: Cln_WaitanyinvoiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_WaitanyinvoiceResponse>

  func waitInvoice(request: Cln_WaitinvoiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_WaitinvoiceResponse>

  func waitSendPay(request: Cln_WaitsendpayRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_WaitsendpayResponse>

  func newAddr(request: Cln_NewaddrRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_NewaddrResponse>

  func withdraw(request: Cln_WithdrawRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_WithdrawResponse>

  func keySend(request: Cln_KeysendRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_KeysendResponse>

  func fundPsbt(request: Cln_FundpsbtRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_FundpsbtResponse>

  func sendPsbt(request: Cln_SendpsbtRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_SendpsbtResponse>

  func signPsbt(request: Cln_SignpsbtRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_SignpsbtResponse>

  func utxoPsbt(request: Cln_UtxopsbtRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_UtxopsbtResponse>

  func txDiscard(request: Cln_TxdiscardRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_TxdiscardResponse>

  func txPrepare(request: Cln_TxprepareRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_TxprepareResponse>

  func txSend(request: Cln_TxsendRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_TxsendResponse>

  func listPeerChannels(request: Cln_ListpeerchannelsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_ListpeerchannelsResponse>

  func listClosedChannels(request: Cln_ListclosedchannelsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_ListclosedchannelsResponse>

  func decodePay(request: Cln_DecodepayRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_DecodepayResponse>

  func decode(request: Cln_DecodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_DecodeResponse>

  func disconnect(request: Cln_DisconnectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_DisconnectResponse>

  func feerates(request: Cln_FeeratesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_FeeratesResponse>

  func fundChannel(request: Cln_FundchannelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_FundchannelResponse>

  func getRoute(request: Cln_GetrouteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_GetrouteResponse>

  func listForwards(request: Cln_ListforwardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_ListforwardsResponse>

  func listPays(request: Cln_ListpaysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_ListpaysResponse>

  func listHtlcs(request: Cln_ListhtlcsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_ListhtlcsResponse>

  func ping(request: Cln_PingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_PingResponse>

  func sendCustomMsg(request: Cln_SendcustommsgRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_SendcustommsgResponse>

  func setChannel(request: Cln_SetchannelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_SetchannelResponse>

  func signInvoice(request: Cln_SigninvoiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_SigninvoiceResponse>

  func signMessage(request: Cln_SignmessageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_SignmessageResponse>

  func stop(request: Cln_StopRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_StopResponse>

  func preApproveKeysend(request: Cln_PreapprovekeysendRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_PreapprovekeysendResponse>

  func preApproveInvoice(request: Cln_PreapproveinvoiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_PreapproveinvoiceResponse>

  func staticBackup(request: Cln_StaticbackupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cln_StaticbackupResponse>
}

extension Cln_NodeProvider {
  internal var serviceName: Substring {
    return Cln_NodeServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Getinfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_GetinfoRequest>(),
        responseSerializer: ProtobufSerializer<Cln_GetinfoResponse>(),
        interceptors: self.interceptors?.makeGetinfoInterceptors() ?? [],
        userFunction: self.getinfo(request:context:)
      )

    case "ListPeers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListpeersRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListpeersResponse>(),
        interceptors: self.interceptors?.makeListPeersInterceptors() ?? [],
        userFunction: self.listPeers(request:context:)
      )

    case "ListFunds":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListfundsRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListfundsResponse>(),
        interceptors: self.interceptors?.makeListFundsInterceptors() ?? [],
        userFunction: self.listFunds(request:context:)
      )

    case "SendPay":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_SendpayRequest>(),
        responseSerializer: ProtobufSerializer<Cln_SendpayResponse>(),
        interceptors: self.interceptors?.makeSendPayInterceptors() ?? [],
        userFunction: self.sendPay(request:context:)
      )

    case "ListChannels":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListchannelsRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListchannelsResponse>(),
        interceptors: self.interceptors?.makeListChannelsInterceptors() ?? [],
        userFunction: self.listChannels(request:context:)
      )

    case "AddGossip":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_AddgossipRequest>(),
        responseSerializer: ProtobufSerializer<Cln_AddgossipResponse>(),
        interceptors: self.interceptors?.makeAddGossipInterceptors() ?? [],
        userFunction: self.addGossip(request:context:)
      )

    case "AutoCleanInvoice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_AutocleaninvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_AutocleaninvoiceResponse>(),
        interceptors: self.interceptors?.makeAutoCleanInvoiceInterceptors() ?? [],
        userFunction: self.autoCleanInvoice(request:context:)
      )

    case "CheckMessage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_CheckmessageRequest>(),
        responseSerializer: ProtobufSerializer<Cln_CheckmessageResponse>(),
        interceptors: self.interceptors?.makeCheckMessageInterceptors() ?? [],
        userFunction: self.checkMessage(request:context:)
      )

    case "Close":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_CloseRequest>(),
        responseSerializer: ProtobufSerializer<Cln_CloseResponse>(),
        interceptors: self.interceptors?.makeCloseInterceptors() ?? [],
        userFunction: self.close(request:context:)
      )

    case "ConnectPeer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ConnectRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ConnectResponse>(),
        interceptors: self.interceptors?.makeConnectPeerInterceptors() ?? [],
        userFunction: self.connectPeer(request:context:)
      )

    case "CreateInvoice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_CreateinvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_CreateinvoiceResponse>(),
        interceptors: self.interceptors?.makeCreateInvoiceInterceptors() ?? [],
        userFunction: self.createInvoice(request:context:)
      )

    case "Datastore":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_DatastoreRequest>(),
        responseSerializer: ProtobufSerializer<Cln_DatastoreResponse>(),
        interceptors: self.interceptors?.makeDatastoreInterceptors() ?? [],
        userFunction: self.datastore(request:context:)
      )

    case "CreateOnion":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_CreateonionRequest>(),
        responseSerializer: ProtobufSerializer<Cln_CreateonionResponse>(),
        interceptors: self.interceptors?.makeCreateOnionInterceptors() ?? [],
        userFunction: self.createOnion(request:context:)
      )

    case "DelDatastore":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_DeldatastoreRequest>(),
        responseSerializer: ProtobufSerializer<Cln_DeldatastoreResponse>(),
        interceptors: self.interceptors?.makeDelDatastoreInterceptors() ?? [],
        userFunction: self.delDatastore(request:context:)
      )

    case "DelExpiredInvoice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_DelexpiredinvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_DelexpiredinvoiceResponse>(),
        interceptors: self.interceptors?.makeDelExpiredInvoiceInterceptors() ?? [],
        userFunction: self.delExpiredInvoice(request:context:)
      )

    case "DelInvoice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_DelinvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_DelinvoiceResponse>(),
        interceptors: self.interceptors?.makeDelInvoiceInterceptors() ?? [],
        userFunction: self.delInvoice(request:context:)
      )

    case "Invoice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_InvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_InvoiceResponse>(),
        interceptors: self.interceptors?.makeInvoiceInterceptors() ?? [],
        userFunction: self.invoice(request:context:)
      )

    case "ListDatastore":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListdatastoreRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListdatastoreResponse>(),
        interceptors: self.interceptors?.makeListDatastoreInterceptors() ?? [],
        userFunction: self.listDatastore(request:context:)
      )

    case "ListInvoices":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListinvoicesRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListinvoicesResponse>(),
        interceptors: self.interceptors?.makeListInvoicesInterceptors() ?? [],
        userFunction: self.listInvoices(request:context:)
      )

    case "SendOnion":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_SendonionRequest>(),
        responseSerializer: ProtobufSerializer<Cln_SendonionResponse>(),
        interceptors: self.interceptors?.makeSendOnionInterceptors() ?? [],
        userFunction: self.sendOnion(request:context:)
      )

    case "ListSendPays":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListsendpaysRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListsendpaysResponse>(),
        interceptors: self.interceptors?.makeListSendPaysInterceptors() ?? [],
        userFunction: self.listSendPays(request:context:)
      )

    case "ListTransactions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListtransactionsRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListtransactionsResponse>(),
        interceptors: self.interceptors?.makeListTransactionsInterceptors() ?? [],
        userFunction: self.listTransactions(request:context:)
      )

    case "Pay":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_PayRequest>(),
        responseSerializer: ProtobufSerializer<Cln_PayResponse>(),
        interceptors: self.interceptors?.makePayInterceptors() ?? [],
        userFunction: self.pay(request:context:)
      )

    case "ListNodes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListnodesRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListnodesResponse>(),
        interceptors: self.interceptors?.makeListNodesInterceptors() ?? [],
        userFunction: self.listNodes(request:context:)
      )

    case "WaitAnyInvoice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_WaitanyinvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_WaitanyinvoiceResponse>(),
        interceptors: self.interceptors?.makeWaitAnyInvoiceInterceptors() ?? [],
        userFunction: self.waitAnyInvoice(request:context:)
      )

    case "WaitInvoice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_WaitinvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_WaitinvoiceResponse>(),
        interceptors: self.interceptors?.makeWaitInvoiceInterceptors() ?? [],
        userFunction: self.waitInvoice(request:context:)
      )

    case "WaitSendPay":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_WaitsendpayRequest>(),
        responseSerializer: ProtobufSerializer<Cln_WaitsendpayResponse>(),
        interceptors: self.interceptors?.makeWaitSendPayInterceptors() ?? [],
        userFunction: self.waitSendPay(request:context:)
      )

    case "NewAddr":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_NewaddrRequest>(),
        responseSerializer: ProtobufSerializer<Cln_NewaddrResponse>(),
        interceptors: self.interceptors?.makeNewAddrInterceptors() ?? [],
        userFunction: self.newAddr(request:context:)
      )

    case "Withdraw":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_WithdrawRequest>(),
        responseSerializer: ProtobufSerializer<Cln_WithdrawResponse>(),
        interceptors: self.interceptors?.makeWithdrawInterceptors() ?? [],
        userFunction: self.withdraw(request:context:)
      )

    case "KeySend":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_KeysendRequest>(),
        responseSerializer: ProtobufSerializer<Cln_KeysendResponse>(),
        interceptors: self.interceptors?.makeKeySendInterceptors() ?? [],
        userFunction: self.keySend(request:context:)
      )

    case "FundPsbt":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_FundpsbtRequest>(),
        responseSerializer: ProtobufSerializer<Cln_FundpsbtResponse>(),
        interceptors: self.interceptors?.makeFundPsbtInterceptors() ?? [],
        userFunction: self.fundPsbt(request:context:)
      )

    case "SendPsbt":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_SendpsbtRequest>(),
        responseSerializer: ProtobufSerializer<Cln_SendpsbtResponse>(),
        interceptors: self.interceptors?.makeSendPsbtInterceptors() ?? [],
        userFunction: self.sendPsbt(request:context:)
      )

    case "SignPsbt":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_SignpsbtRequest>(),
        responseSerializer: ProtobufSerializer<Cln_SignpsbtResponse>(),
        interceptors: self.interceptors?.makeSignPsbtInterceptors() ?? [],
        userFunction: self.signPsbt(request:context:)
      )

    case "UtxoPsbt":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_UtxopsbtRequest>(),
        responseSerializer: ProtobufSerializer<Cln_UtxopsbtResponse>(),
        interceptors: self.interceptors?.makeUtxoPsbtInterceptors() ?? [],
        userFunction: self.utxoPsbt(request:context:)
      )

    case "TxDiscard":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_TxdiscardRequest>(),
        responseSerializer: ProtobufSerializer<Cln_TxdiscardResponse>(),
        interceptors: self.interceptors?.makeTxDiscardInterceptors() ?? [],
        userFunction: self.txDiscard(request:context:)
      )

    case "TxPrepare":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_TxprepareRequest>(),
        responseSerializer: ProtobufSerializer<Cln_TxprepareResponse>(),
        interceptors: self.interceptors?.makeTxPrepareInterceptors() ?? [],
        userFunction: self.txPrepare(request:context:)
      )

    case "TxSend":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_TxsendRequest>(),
        responseSerializer: ProtobufSerializer<Cln_TxsendResponse>(),
        interceptors: self.interceptors?.makeTxSendInterceptors() ?? [],
        userFunction: self.txSend(request:context:)
      )

    case "ListPeerChannels":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListpeerchannelsRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListpeerchannelsResponse>(),
        interceptors: self.interceptors?.makeListPeerChannelsInterceptors() ?? [],
        userFunction: self.listPeerChannels(request:context:)
      )

    case "ListClosedChannels":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListclosedchannelsRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListclosedchannelsResponse>(),
        interceptors: self.interceptors?.makeListClosedChannelsInterceptors() ?? [],
        userFunction: self.listClosedChannels(request:context:)
      )

    case "DecodePay":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_DecodepayRequest>(),
        responseSerializer: ProtobufSerializer<Cln_DecodepayResponse>(),
        interceptors: self.interceptors?.makeDecodePayInterceptors() ?? [],
        userFunction: self.decodePay(request:context:)
      )

    case "Decode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_DecodeRequest>(),
        responseSerializer: ProtobufSerializer<Cln_DecodeResponse>(),
        interceptors: self.interceptors?.makeDecodeInterceptors() ?? [],
        userFunction: self.decode(request:context:)
      )

    case "Disconnect":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_DisconnectRequest>(),
        responseSerializer: ProtobufSerializer<Cln_DisconnectResponse>(),
        interceptors: self.interceptors?.makeDisconnectInterceptors() ?? [],
        userFunction: self.disconnect(request:context:)
      )

    case "Feerates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_FeeratesRequest>(),
        responseSerializer: ProtobufSerializer<Cln_FeeratesResponse>(),
        interceptors: self.interceptors?.makeFeeratesInterceptors() ?? [],
        userFunction: self.feerates(request:context:)
      )

    case "FundChannel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_FundchannelRequest>(),
        responseSerializer: ProtobufSerializer<Cln_FundchannelResponse>(),
        interceptors: self.interceptors?.makeFundChannelInterceptors() ?? [],
        userFunction: self.fundChannel(request:context:)
      )

    case "GetRoute":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_GetrouteRequest>(),
        responseSerializer: ProtobufSerializer<Cln_GetrouteResponse>(),
        interceptors: self.interceptors?.makeGetRouteInterceptors() ?? [],
        userFunction: self.getRoute(request:context:)
      )

    case "ListForwards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListforwardsRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListforwardsResponse>(),
        interceptors: self.interceptors?.makeListForwardsInterceptors() ?? [],
        userFunction: self.listForwards(request:context:)
      )

    case "ListPays":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListpaysRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListpaysResponse>(),
        interceptors: self.interceptors?.makeListPaysInterceptors() ?? [],
        userFunction: self.listPays(request:context:)
      )

    case "ListHtlcs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListhtlcsRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListhtlcsResponse>(),
        interceptors: self.interceptors?.makeListHtlcsInterceptors() ?? [],
        userFunction: self.listHtlcs(request:context:)
      )

    case "Ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_PingRequest>(),
        responseSerializer: ProtobufSerializer<Cln_PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    case "SendCustomMsg":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_SendcustommsgRequest>(),
        responseSerializer: ProtobufSerializer<Cln_SendcustommsgResponse>(),
        interceptors: self.interceptors?.makeSendCustomMsgInterceptors() ?? [],
        userFunction: self.sendCustomMsg(request:context:)
      )

    case "SetChannel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_SetchannelRequest>(),
        responseSerializer: ProtobufSerializer<Cln_SetchannelResponse>(),
        interceptors: self.interceptors?.makeSetChannelInterceptors() ?? [],
        userFunction: self.setChannel(request:context:)
      )

    case "SignInvoice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_SigninvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_SigninvoiceResponse>(),
        interceptors: self.interceptors?.makeSignInvoiceInterceptors() ?? [],
        userFunction: self.signInvoice(request:context:)
      )

    case "SignMessage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_SignmessageRequest>(),
        responseSerializer: ProtobufSerializer<Cln_SignmessageResponse>(),
        interceptors: self.interceptors?.makeSignMessageInterceptors() ?? [],
        userFunction: self.signMessage(request:context:)
      )

    case "Stop":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_StopRequest>(),
        responseSerializer: ProtobufSerializer<Cln_StopResponse>(),
        interceptors: self.interceptors?.makeStopInterceptors() ?? [],
        userFunction: self.stop(request:context:)
      )

    case "PreApproveKeysend":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_PreapprovekeysendRequest>(),
        responseSerializer: ProtobufSerializer<Cln_PreapprovekeysendResponse>(),
        interceptors: self.interceptors?.makePreApproveKeysendInterceptors() ?? [],
        userFunction: self.preApproveKeysend(request:context:)
      )

    case "PreApproveInvoice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_PreapproveinvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_PreapproveinvoiceResponse>(),
        interceptors: self.interceptors?.makePreApproveInvoiceInterceptors() ?? [],
        userFunction: self.preApproveInvoice(request:context:)
      )

    case "StaticBackup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_StaticbackupRequest>(),
        responseSerializer: ProtobufSerializer<Cln_StaticbackupResponse>(),
        interceptors: self.interceptors?.makeStaticBackupInterceptors() ?? [],
        userFunction: self.staticBackup(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cln_NodeAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cln_NodeServerInterceptorFactoryProtocol? { get }

  func getinfo(
    request: Cln_GetinfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_GetinfoResponse

  func listPeers(
    request: Cln_ListpeersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_ListpeersResponse

  func listFunds(
    request: Cln_ListfundsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_ListfundsResponse

  func sendPay(
    request: Cln_SendpayRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_SendpayResponse

  func listChannels(
    request: Cln_ListchannelsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_ListchannelsResponse

  func addGossip(
    request: Cln_AddgossipRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_AddgossipResponse

  func autoCleanInvoice(
    request: Cln_AutocleaninvoiceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_AutocleaninvoiceResponse

  func checkMessage(
    request: Cln_CheckmessageRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_CheckmessageResponse

  func close(
    request: Cln_CloseRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_CloseResponse

  func connectPeer(
    request: Cln_ConnectRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_ConnectResponse

  func createInvoice(
    request: Cln_CreateinvoiceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_CreateinvoiceResponse

  func datastore(
    request: Cln_DatastoreRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_DatastoreResponse

  func createOnion(
    request: Cln_CreateonionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_CreateonionResponse

  func delDatastore(
    request: Cln_DeldatastoreRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_DeldatastoreResponse

  func delExpiredInvoice(
    request: Cln_DelexpiredinvoiceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_DelexpiredinvoiceResponse

  func delInvoice(
    request: Cln_DelinvoiceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_DelinvoiceResponse

  func invoice(
    request: Cln_InvoiceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_InvoiceResponse

  func listDatastore(
    request: Cln_ListdatastoreRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_ListdatastoreResponse

  func listInvoices(
    request: Cln_ListinvoicesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_ListinvoicesResponse

  func sendOnion(
    request: Cln_SendonionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_SendonionResponse

  func listSendPays(
    request: Cln_ListsendpaysRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_ListsendpaysResponse

  func listTransactions(
    request: Cln_ListtransactionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_ListtransactionsResponse

  func pay(
    request: Cln_PayRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_PayResponse

  func listNodes(
    request: Cln_ListnodesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_ListnodesResponse

  func waitAnyInvoice(
    request: Cln_WaitanyinvoiceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_WaitanyinvoiceResponse

  func waitInvoice(
    request: Cln_WaitinvoiceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_WaitinvoiceResponse

  func waitSendPay(
    request: Cln_WaitsendpayRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_WaitsendpayResponse

  func newAddr(
    request: Cln_NewaddrRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_NewaddrResponse

  func withdraw(
    request: Cln_WithdrawRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_WithdrawResponse

  func keySend(
    request: Cln_KeysendRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_KeysendResponse

  func fundPsbt(
    request: Cln_FundpsbtRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_FundpsbtResponse

  func sendPsbt(
    request: Cln_SendpsbtRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_SendpsbtResponse

  func signPsbt(
    request: Cln_SignpsbtRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_SignpsbtResponse

  func utxoPsbt(
    request: Cln_UtxopsbtRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_UtxopsbtResponse

  func txDiscard(
    request: Cln_TxdiscardRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_TxdiscardResponse

  func txPrepare(
    request: Cln_TxprepareRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_TxprepareResponse

  func txSend(
    request: Cln_TxsendRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_TxsendResponse

  func listPeerChannels(
    request: Cln_ListpeerchannelsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_ListpeerchannelsResponse

  func listClosedChannels(
    request: Cln_ListclosedchannelsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_ListclosedchannelsResponse

  func decodePay(
    request: Cln_DecodepayRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_DecodepayResponse

  func decode(
    request: Cln_DecodeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_DecodeResponse

  func disconnect(
    request: Cln_DisconnectRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_DisconnectResponse

  func feerates(
    request: Cln_FeeratesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_FeeratesResponse

  func fundChannel(
    request: Cln_FundchannelRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_FundchannelResponse

  func getRoute(
    request: Cln_GetrouteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_GetrouteResponse

  func listForwards(
    request: Cln_ListforwardsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_ListforwardsResponse

  func listPays(
    request: Cln_ListpaysRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_ListpaysResponse

  func listHtlcs(
    request: Cln_ListhtlcsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_ListhtlcsResponse

  func ping(
    request: Cln_PingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_PingResponse

  func sendCustomMsg(
    request: Cln_SendcustommsgRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_SendcustommsgResponse

  func setChannel(
    request: Cln_SetchannelRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_SetchannelResponse

  func signInvoice(
    request: Cln_SigninvoiceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_SigninvoiceResponse

  func signMessage(
    request: Cln_SignmessageRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_SignmessageResponse

  func stop(
    request: Cln_StopRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_StopResponse

  func preApproveKeysend(
    request: Cln_PreapprovekeysendRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_PreapprovekeysendResponse

  func preApproveInvoice(
    request: Cln_PreapproveinvoiceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_PreapproveinvoiceResponse

  func staticBackup(
    request: Cln_StaticbackupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cln_StaticbackupResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cln_NodeAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cln_NodeServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cln_NodeServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cln_NodeServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Getinfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_GetinfoRequest>(),
        responseSerializer: ProtobufSerializer<Cln_GetinfoResponse>(),
        interceptors: self.interceptors?.makeGetinfoInterceptors() ?? [],
        wrapping: { try await self.getinfo(request: $0, context: $1) }
      )

    case "ListPeers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListpeersRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListpeersResponse>(),
        interceptors: self.interceptors?.makeListPeersInterceptors() ?? [],
        wrapping: { try await self.listPeers(request: $0, context: $1) }
      )

    case "ListFunds":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListfundsRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListfundsResponse>(),
        interceptors: self.interceptors?.makeListFundsInterceptors() ?? [],
        wrapping: { try await self.listFunds(request: $0, context: $1) }
      )

    case "SendPay":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_SendpayRequest>(),
        responseSerializer: ProtobufSerializer<Cln_SendpayResponse>(),
        interceptors: self.interceptors?.makeSendPayInterceptors() ?? [],
        wrapping: { try await self.sendPay(request: $0, context: $1) }
      )

    case "ListChannels":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListchannelsRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListchannelsResponse>(),
        interceptors: self.interceptors?.makeListChannelsInterceptors() ?? [],
        wrapping: { try await self.listChannels(request: $0, context: $1) }
      )

    case "AddGossip":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_AddgossipRequest>(),
        responseSerializer: ProtobufSerializer<Cln_AddgossipResponse>(),
        interceptors: self.interceptors?.makeAddGossipInterceptors() ?? [],
        wrapping: { try await self.addGossip(request: $0, context: $1) }
      )

    case "AutoCleanInvoice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_AutocleaninvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_AutocleaninvoiceResponse>(),
        interceptors: self.interceptors?.makeAutoCleanInvoiceInterceptors() ?? [],
        wrapping: { try await self.autoCleanInvoice(request: $0, context: $1) }
      )

    case "CheckMessage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_CheckmessageRequest>(),
        responseSerializer: ProtobufSerializer<Cln_CheckmessageResponse>(),
        interceptors: self.interceptors?.makeCheckMessageInterceptors() ?? [],
        wrapping: { try await self.checkMessage(request: $0, context: $1) }
      )

    case "Close":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_CloseRequest>(),
        responseSerializer: ProtobufSerializer<Cln_CloseResponse>(),
        interceptors: self.interceptors?.makeCloseInterceptors() ?? [],
        wrapping: { try await self.close(request: $0, context: $1) }
      )

    case "ConnectPeer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ConnectRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ConnectResponse>(),
        interceptors: self.interceptors?.makeConnectPeerInterceptors() ?? [],
        wrapping: { try await self.connectPeer(request: $0, context: $1) }
      )

    case "CreateInvoice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_CreateinvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_CreateinvoiceResponse>(),
        interceptors: self.interceptors?.makeCreateInvoiceInterceptors() ?? [],
        wrapping: { try await self.createInvoice(request: $0, context: $1) }
      )

    case "Datastore":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_DatastoreRequest>(),
        responseSerializer: ProtobufSerializer<Cln_DatastoreResponse>(),
        interceptors: self.interceptors?.makeDatastoreInterceptors() ?? [],
        wrapping: { try await self.datastore(request: $0, context: $1) }
      )

    case "CreateOnion":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_CreateonionRequest>(),
        responseSerializer: ProtobufSerializer<Cln_CreateonionResponse>(),
        interceptors: self.interceptors?.makeCreateOnionInterceptors() ?? [],
        wrapping: { try await self.createOnion(request: $0, context: $1) }
      )

    case "DelDatastore":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_DeldatastoreRequest>(),
        responseSerializer: ProtobufSerializer<Cln_DeldatastoreResponse>(),
        interceptors: self.interceptors?.makeDelDatastoreInterceptors() ?? [],
        wrapping: { try await self.delDatastore(request: $0, context: $1) }
      )

    case "DelExpiredInvoice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_DelexpiredinvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_DelexpiredinvoiceResponse>(),
        interceptors: self.interceptors?.makeDelExpiredInvoiceInterceptors() ?? [],
        wrapping: { try await self.delExpiredInvoice(request: $0, context: $1) }
      )

    case "DelInvoice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_DelinvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_DelinvoiceResponse>(),
        interceptors: self.interceptors?.makeDelInvoiceInterceptors() ?? [],
        wrapping: { try await self.delInvoice(request: $0, context: $1) }
      )

    case "Invoice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_InvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_InvoiceResponse>(),
        interceptors: self.interceptors?.makeInvoiceInterceptors() ?? [],
        wrapping: { try await self.invoice(request: $0, context: $1) }
      )

    case "ListDatastore":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListdatastoreRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListdatastoreResponse>(),
        interceptors: self.interceptors?.makeListDatastoreInterceptors() ?? [],
        wrapping: { try await self.listDatastore(request: $0, context: $1) }
      )

    case "ListInvoices":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListinvoicesRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListinvoicesResponse>(),
        interceptors: self.interceptors?.makeListInvoicesInterceptors() ?? [],
        wrapping: { try await self.listInvoices(request: $0, context: $1) }
      )

    case "SendOnion":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_SendonionRequest>(),
        responseSerializer: ProtobufSerializer<Cln_SendonionResponse>(),
        interceptors: self.interceptors?.makeSendOnionInterceptors() ?? [],
        wrapping: { try await self.sendOnion(request: $0, context: $1) }
      )

    case "ListSendPays":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListsendpaysRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListsendpaysResponse>(),
        interceptors: self.interceptors?.makeListSendPaysInterceptors() ?? [],
        wrapping: { try await self.listSendPays(request: $0, context: $1) }
      )

    case "ListTransactions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListtransactionsRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListtransactionsResponse>(),
        interceptors: self.interceptors?.makeListTransactionsInterceptors() ?? [],
        wrapping: { try await self.listTransactions(request: $0, context: $1) }
      )

    case "Pay":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_PayRequest>(),
        responseSerializer: ProtobufSerializer<Cln_PayResponse>(),
        interceptors: self.interceptors?.makePayInterceptors() ?? [],
        wrapping: { try await self.pay(request: $0, context: $1) }
      )

    case "ListNodes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListnodesRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListnodesResponse>(),
        interceptors: self.interceptors?.makeListNodesInterceptors() ?? [],
        wrapping: { try await self.listNodes(request: $0, context: $1) }
      )

    case "WaitAnyInvoice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_WaitanyinvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_WaitanyinvoiceResponse>(),
        interceptors: self.interceptors?.makeWaitAnyInvoiceInterceptors() ?? [],
        wrapping: { try await self.waitAnyInvoice(request: $0, context: $1) }
      )

    case "WaitInvoice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_WaitinvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_WaitinvoiceResponse>(),
        interceptors: self.interceptors?.makeWaitInvoiceInterceptors() ?? [],
        wrapping: { try await self.waitInvoice(request: $0, context: $1) }
      )

    case "WaitSendPay":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_WaitsendpayRequest>(),
        responseSerializer: ProtobufSerializer<Cln_WaitsendpayResponse>(),
        interceptors: self.interceptors?.makeWaitSendPayInterceptors() ?? [],
        wrapping: { try await self.waitSendPay(request: $0, context: $1) }
      )

    case "NewAddr":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_NewaddrRequest>(),
        responseSerializer: ProtobufSerializer<Cln_NewaddrResponse>(),
        interceptors: self.interceptors?.makeNewAddrInterceptors() ?? [],
        wrapping: { try await self.newAddr(request: $0, context: $1) }
      )

    case "Withdraw":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_WithdrawRequest>(),
        responseSerializer: ProtobufSerializer<Cln_WithdrawResponse>(),
        interceptors: self.interceptors?.makeWithdrawInterceptors() ?? [],
        wrapping: { try await self.withdraw(request: $0, context: $1) }
      )

    case "KeySend":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_KeysendRequest>(),
        responseSerializer: ProtobufSerializer<Cln_KeysendResponse>(),
        interceptors: self.interceptors?.makeKeySendInterceptors() ?? [],
        wrapping: { try await self.keySend(request: $0, context: $1) }
      )

    case "FundPsbt":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_FundpsbtRequest>(),
        responseSerializer: ProtobufSerializer<Cln_FundpsbtResponse>(),
        interceptors: self.interceptors?.makeFundPsbtInterceptors() ?? [],
        wrapping: { try await self.fundPsbt(request: $0, context: $1) }
      )

    case "SendPsbt":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_SendpsbtRequest>(),
        responseSerializer: ProtobufSerializer<Cln_SendpsbtResponse>(),
        interceptors: self.interceptors?.makeSendPsbtInterceptors() ?? [],
        wrapping: { try await self.sendPsbt(request: $0, context: $1) }
      )

    case "SignPsbt":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_SignpsbtRequest>(),
        responseSerializer: ProtobufSerializer<Cln_SignpsbtResponse>(),
        interceptors: self.interceptors?.makeSignPsbtInterceptors() ?? [],
        wrapping: { try await self.signPsbt(request: $0, context: $1) }
      )

    case "UtxoPsbt":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_UtxopsbtRequest>(),
        responseSerializer: ProtobufSerializer<Cln_UtxopsbtResponse>(),
        interceptors: self.interceptors?.makeUtxoPsbtInterceptors() ?? [],
        wrapping: { try await self.utxoPsbt(request: $0, context: $1) }
      )

    case "TxDiscard":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_TxdiscardRequest>(),
        responseSerializer: ProtobufSerializer<Cln_TxdiscardResponse>(),
        interceptors: self.interceptors?.makeTxDiscardInterceptors() ?? [],
        wrapping: { try await self.txDiscard(request: $0, context: $1) }
      )

    case "TxPrepare":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_TxprepareRequest>(),
        responseSerializer: ProtobufSerializer<Cln_TxprepareResponse>(),
        interceptors: self.interceptors?.makeTxPrepareInterceptors() ?? [],
        wrapping: { try await self.txPrepare(request: $0, context: $1) }
      )

    case "TxSend":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_TxsendRequest>(),
        responseSerializer: ProtobufSerializer<Cln_TxsendResponse>(),
        interceptors: self.interceptors?.makeTxSendInterceptors() ?? [],
        wrapping: { try await self.txSend(request: $0, context: $1) }
      )

    case "ListPeerChannels":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListpeerchannelsRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListpeerchannelsResponse>(),
        interceptors: self.interceptors?.makeListPeerChannelsInterceptors() ?? [],
        wrapping: { try await self.listPeerChannels(request: $0, context: $1) }
      )

    case "ListClosedChannels":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListclosedchannelsRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListclosedchannelsResponse>(),
        interceptors: self.interceptors?.makeListClosedChannelsInterceptors() ?? [],
        wrapping: { try await self.listClosedChannels(request: $0, context: $1) }
      )

    case "DecodePay":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_DecodepayRequest>(),
        responseSerializer: ProtobufSerializer<Cln_DecodepayResponse>(),
        interceptors: self.interceptors?.makeDecodePayInterceptors() ?? [],
        wrapping: { try await self.decodePay(request: $0, context: $1) }
      )

    case "Decode":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_DecodeRequest>(),
        responseSerializer: ProtobufSerializer<Cln_DecodeResponse>(),
        interceptors: self.interceptors?.makeDecodeInterceptors() ?? [],
        wrapping: { try await self.decode(request: $0, context: $1) }
      )

    case "Disconnect":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_DisconnectRequest>(),
        responseSerializer: ProtobufSerializer<Cln_DisconnectResponse>(),
        interceptors: self.interceptors?.makeDisconnectInterceptors() ?? [],
        wrapping: { try await self.disconnect(request: $0, context: $1) }
      )

    case "Feerates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_FeeratesRequest>(),
        responseSerializer: ProtobufSerializer<Cln_FeeratesResponse>(),
        interceptors: self.interceptors?.makeFeeratesInterceptors() ?? [],
        wrapping: { try await self.feerates(request: $0, context: $1) }
      )

    case "FundChannel":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_FundchannelRequest>(),
        responseSerializer: ProtobufSerializer<Cln_FundchannelResponse>(),
        interceptors: self.interceptors?.makeFundChannelInterceptors() ?? [],
        wrapping: { try await self.fundChannel(request: $0, context: $1) }
      )

    case "GetRoute":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_GetrouteRequest>(),
        responseSerializer: ProtobufSerializer<Cln_GetrouteResponse>(),
        interceptors: self.interceptors?.makeGetRouteInterceptors() ?? [],
        wrapping: { try await self.getRoute(request: $0, context: $1) }
      )

    case "ListForwards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListforwardsRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListforwardsResponse>(),
        interceptors: self.interceptors?.makeListForwardsInterceptors() ?? [],
        wrapping: { try await self.listForwards(request: $0, context: $1) }
      )

    case "ListPays":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListpaysRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListpaysResponse>(),
        interceptors: self.interceptors?.makeListPaysInterceptors() ?? [],
        wrapping: { try await self.listPays(request: $0, context: $1) }
      )

    case "ListHtlcs":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_ListhtlcsRequest>(),
        responseSerializer: ProtobufSerializer<Cln_ListhtlcsResponse>(),
        interceptors: self.interceptors?.makeListHtlcsInterceptors() ?? [],
        wrapping: { try await self.listHtlcs(request: $0, context: $1) }
      )

    case "Ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_PingRequest>(),
        responseSerializer: ProtobufSerializer<Cln_PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        wrapping: { try await self.ping(request: $0, context: $1) }
      )

    case "SendCustomMsg":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_SendcustommsgRequest>(),
        responseSerializer: ProtobufSerializer<Cln_SendcustommsgResponse>(),
        interceptors: self.interceptors?.makeSendCustomMsgInterceptors() ?? [],
        wrapping: { try await self.sendCustomMsg(request: $0, context: $1) }
      )

    case "SetChannel":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_SetchannelRequest>(),
        responseSerializer: ProtobufSerializer<Cln_SetchannelResponse>(),
        interceptors: self.interceptors?.makeSetChannelInterceptors() ?? [],
        wrapping: { try await self.setChannel(request: $0, context: $1) }
      )

    case "SignInvoice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_SigninvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_SigninvoiceResponse>(),
        interceptors: self.interceptors?.makeSignInvoiceInterceptors() ?? [],
        wrapping: { try await self.signInvoice(request: $0, context: $1) }
      )

    case "SignMessage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_SignmessageRequest>(),
        responseSerializer: ProtobufSerializer<Cln_SignmessageResponse>(),
        interceptors: self.interceptors?.makeSignMessageInterceptors() ?? [],
        wrapping: { try await self.signMessage(request: $0, context: $1) }
      )

    case "Stop":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_StopRequest>(),
        responseSerializer: ProtobufSerializer<Cln_StopResponse>(),
        interceptors: self.interceptors?.makeStopInterceptors() ?? [],
        wrapping: { try await self.stop(request: $0, context: $1) }
      )

    case "PreApproveKeysend":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_PreapprovekeysendRequest>(),
        responseSerializer: ProtobufSerializer<Cln_PreapprovekeysendResponse>(),
        interceptors: self.interceptors?.makePreApproveKeysendInterceptors() ?? [],
        wrapping: { try await self.preApproveKeysend(request: $0, context: $1) }
      )

    case "PreApproveInvoice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_PreapproveinvoiceRequest>(),
        responseSerializer: ProtobufSerializer<Cln_PreapproveinvoiceResponse>(),
        interceptors: self.interceptors?.makePreApproveInvoiceInterceptors() ?? [],
        wrapping: { try await self.preApproveInvoice(request: $0, context: $1) }
      )

    case "StaticBackup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cln_StaticbackupRequest>(),
        responseSerializer: ProtobufSerializer<Cln_StaticbackupResponse>(),
        interceptors: self.interceptors?.makeStaticBackupInterceptors() ?? [],
        wrapping: { try await self.staticBackup(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Cln_NodeServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getinfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetinfoInterceptors() -> [ServerInterceptor<Cln_GetinfoRequest, Cln_GetinfoResponse>]

  /// - Returns: Interceptors to use when handling 'listPeers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListPeersInterceptors() -> [ServerInterceptor<Cln_ListpeersRequest, Cln_ListpeersResponse>]

  /// - Returns: Interceptors to use when handling 'listFunds'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListFundsInterceptors() -> [ServerInterceptor<Cln_ListfundsRequest, Cln_ListfundsResponse>]

  /// - Returns: Interceptors to use when handling 'sendPay'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendPayInterceptors() -> [ServerInterceptor<Cln_SendpayRequest, Cln_SendpayResponse>]

  /// - Returns: Interceptors to use when handling 'listChannels'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListChannelsInterceptors() -> [ServerInterceptor<Cln_ListchannelsRequest, Cln_ListchannelsResponse>]

  /// - Returns: Interceptors to use when handling 'addGossip'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddGossipInterceptors() -> [ServerInterceptor<Cln_AddgossipRequest, Cln_AddgossipResponse>]

  /// - Returns: Interceptors to use when handling 'autoCleanInvoice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAutoCleanInvoiceInterceptors() -> [ServerInterceptor<Cln_AutocleaninvoiceRequest, Cln_AutocleaninvoiceResponse>]

  /// - Returns: Interceptors to use when handling 'checkMessage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCheckMessageInterceptors() -> [ServerInterceptor<Cln_CheckmessageRequest, Cln_CheckmessageResponse>]

  /// - Returns: Interceptors to use when handling 'close'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCloseInterceptors() -> [ServerInterceptor<Cln_CloseRequest, Cln_CloseResponse>]

  /// - Returns: Interceptors to use when handling 'connectPeer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConnectPeerInterceptors() -> [ServerInterceptor<Cln_ConnectRequest, Cln_ConnectResponse>]

  /// - Returns: Interceptors to use when handling 'createInvoice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateInvoiceInterceptors() -> [ServerInterceptor<Cln_CreateinvoiceRequest, Cln_CreateinvoiceResponse>]

  /// - Returns: Interceptors to use when handling 'datastore'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDatastoreInterceptors() -> [ServerInterceptor<Cln_DatastoreRequest, Cln_DatastoreResponse>]

  /// - Returns: Interceptors to use when handling 'createOnion'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateOnionInterceptors() -> [ServerInterceptor<Cln_CreateonionRequest, Cln_CreateonionResponse>]

  /// - Returns: Interceptors to use when handling 'delDatastore'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelDatastoreInterceptors() -> [ServerInterceptor<Cln_DeldatastoreRequest, Cln_DeldatastoreResponse>]

  /// - Returns: Interceptors to use when handling 'delExpiredInvoice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelExpiredInvoiceInterceptors() -> [ServerInterceptor<Cln_DelexpiredinvoiceRequest, Cln_DelexpiredinvoiceResponse>]

  /// - Returns: Interceptors to use when handling 'delInvoice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelInvoiceInterceptors() -> [ServerInterceptor<Cln_DelinvoiceRequest, Cln_DelinvoiceResponse>]

  /// - Returns: Interceptors to use when handling 'invoice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInvoiceInterceptors() -> [ServerInterceptor<Cln_InvoiceRequest, Cln_InvoiceResponse>]

  /// - Returns: Interceptors to use when handling 'listDatastore'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListDatastoreInterceptors() -> [ServerInterceptor<Cln_ListdatastoreRequest, Cln_ListdatastoreResponse>]

  /// - Returns: Interceptors to use when handling 'listInvoices'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListInvoicesInterceptors() -> [ServerInterceptor<Cln_ListinvoicesRequest, Cln_ListinvoicesResponse>]

  /// - Returns: Interceptors to use when handling 'sendOnion'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendOnionInterceptors() -> [ServerInterceptor<Cln_SendonionRequest, Cln_SendonionResponse>]

  /// - Returns: Interceptors to use when handling 'listSendPays'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListSendPaysInterceptors() -> [ServerInterceptor<Cln_ListsendpaysRequest, Cln_ListsendpaysResponse>]

  /// - Returns: Interceptors to use when handling 'listTransactions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListTransactionsInterceptors() -> [ServerInterceptor<Cln_ListtransactionsRequest, Cln_ListtransactionsResponse>]

  /// - Returns: Interceptors to use when handling 'pay'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePayInterceptors() -> [ServerInterceptor<Cln_PayRequest, Cln_PayResponse>]

  /// - Returns: Interceptors to use when handling 'listNodes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListNodesInterceptors() -> [ServerInterceptor<Cln_ListnodesRequest, Cln_ListnodesResponse>]

  /// - Returns: Interceptors to use when handling 'waitAnyInvoice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWaitAnyInvoiceInterceptors() -> [ServerInterceptor<Cln_WaitanyinvoiceRequest, Cln_WaitanyinvoiceResponse>]

  /// - Returns: Interceptors to use when handling 'waitInvoice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWaitInvoiceInterceptors() -> [ServerInterceptor<Cln_WaitinvoiceRequest, Cln_WaitinvoiceResponse>]

  /// - Returns: Interceptors to use when handling 'waitSendPay'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWaitSendPayInterceptors() -> [ServerInterceptor<Cln_WaitsendpayRequest, Cln_WaitsendpayResponse>]

  /// - Returns: Interceptors to use when handling 'newAddr'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNewAddrInterceptors() -> [ServerInterceptor<Cln_NewaddrRequest, Cln_NewaddrResponse>]

  /// - Returns: Interceptors to use when handling 'withdraw'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawInterceptors() -> [ServerInterceptor<Cln_WithdrawRequest, Cln_WithdrawResponse>]

  /// - Returns: Interceptors to use when handling 'keySend'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKeySendInterceptors() -> [ServerInterceptor<Cln_KeysendRequest, Cln_KeysendResponse>]

  /// - Returns: Interceptors to use when handling 'fundPsbt'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFundPsbtInterceptors() -> [ServerInterceptor<Cln_FundpsbtRequest, Cln_FundpsbtResponse>]

  /// - Returns: Interceptors to use when handling 'sendPsbt'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendPsbtInterceptors() -> [ServerInterceptor<Cln_SendpsbtRequest, Cln_SendpsbtResponse>]

  /// - Returns: Interceptors to use when handling 'signPsbt'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignPsbtInterceptors() -> [ServerInterceptor<Cln_SignpsbtRequest, Cln_SignpsbtResponse>]

  /// - Returns: Interceptors to use when handling 'utxoPsbt'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUtxoPsbtInterceptors() -> [ServerInterceptor<Cln_UtxopsbtRequest, Cln_UtxopsbtResponse>]

  /// - Returns: Interceptors to use when handling 'txDiscard'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTxDiscardInterceptors() -> [ServerInterceptor<Cln_TxdiscardRequest, Cln_TxdiscardResponse>]

  /// - Returns: Interceptors to use when handling 'txPrepare'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTxPrepareInterceptors() -> [ServerInterceptor<Cln_TxprepareRequest, Cln_TxprepareResponse>]

  /// - Returns: Interceptors to use when handling 'txSend'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTxSendInterceptors() -> [ServerInterceptor<Cln_TxsendRequest, Cln_TxsendResponse>]

  /// - Returns: Interceptors to use when handling 'listPeerChannels'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListPeerChannelsInterceptors() -> [ServerInterceptor<Cln_ListpeerchannelsRequest, Cln_ListpeerchannelsResponse>]

  /// - Returns: Interceptors to use when handling 'listClosedChannels'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListClosedChannelsInterceptors() -> [ServerInterceptor<Cln_ListclosedchannelsRequest, Cln_ListclosedchannelsResponse>]

  /// - Returns: Interceptors to use when handling 'decodePay'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDecodePayInterceptors() -> [ServerInterceptor<Cln_DecodepayRequest, Cln_DecodepayResponse>]

  /// - Returns: Interceptors to use when handling 'decode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDecodeInterceptors() -> [ServerInterceptor<Cln_DecodeRequest, Cln_DecodeResponse>]

  /// - Returns: Interceptors to use when handling 'disconnect'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDisconnectInterceptors() -> [ServerInterceptor<Cln_DisconnectRequest, Cln_DisconnectResponse>]

  /// - Returns: Interceptors to use when handling 'feerates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeeratesInterceptors() -> [ServerInterceptor<Cln_FeeratesRequest, Cln_FeeratesResponse>]

  /// - Returns: Interceptors to use when handling 'fundChannel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFundChannelInterceptors() -> [ServerInterceptor<Cln_FundchannelRequest, Cln_FundchannelResponse>]

  /// - Returns: Interceptors to use when handling 'getRoute'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetRouteInterceptors() -> [ServerInterceptor<Cln_GetrouteRequest, Cln_GetrouteResponse>]

  /// - Returns: Interceptors to use when handling 'listForwards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListForwardsInterceptors() -> [ServerInterceptor<Cln_ListforwardsRequest, Cln_ListforwardsResponse>]

  /// - Returns: Interceptors to use when handling 'listPays'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListPaysInterceptors() -> [ServerInterceptor<Cln_ListpaysRequest, Cln_ListpaysResponse>]

  /// - Returns: Interceptors to use when handling 'listHtlcs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListHtlcsInterceptors() -> [ServerInterceptor<Cln_ListhtlcsRequest, Cln_ListhtlcsResponse>]

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePingInterceptors() -> [ServerInterceptor<Cln_PingRequest, Cln_PingResponse>]

  /// - Returns: Interceptors to use when handling 'sendCustomMsg'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendCustomMsgInterceptors() -> [ServerInterceptor<Cln_SendcustommsgRequest, Cln_SendcustommsgResponse>]

  /// - Returns: Interceptors to use when handling 'setChannel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetChannelInterceptors() -> [ServerInterceptor<Cln_SetchannelRequest, Cln_SetchannelResponse>]

  /// - Returns: Interceptors to use when handling 'signInvoice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignInvoiceInterceptors() -> [ServerInterceptor<Cln_SigninvoiceRequest, Cln_SigninvoiceResponse>]

  /// - Returns: Interceptors to use when handling 'signMessage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignMessageInterceptors() -> [ServerInterceptor<Cln_SignmessageRequest, Cln_SignmessageResponse>]

  /// - Returns: Interceptors to use when handling 'stop'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStopInterceptors() -> [ServerInterceptor<Cln_StopRequest, Cln_StopResponse>]

  /// - Returns: Interceptors to use when handling 'preApproveKeysend'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePreApproveKeysendInterceptors() -> [ServerInterceptor<Cln_PreapprovekeysendRequest, Cln_PreapprovekeysendResponse>]

  /// - Returns: Interceptors to use when handling 'preApproveInvoice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePreApproveInvoiceInterceptors() -> [ServerInterceptor<Cln_PreapproveinvoiceRequest, Cln_PreapproveinvoiceResponse>]

  /// - Returns: Interceptors to use when handling 'staticBackup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStaticBackupInterceptors() -> [ServerInterceptor<Cln_StaticbackupRequest, Cln_StaticbackupResponse>]
}

internal enum Cln_NodeServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Node",
    fullName: "cln.Node",
    methods: [
      Cln_NodeServerMetadata.Methods.getinfo,
      Cln_NodeServerMetadata.Methods.listPeers,
      Cln_NodeServerMetadata.Methods.listFunds,
      Cln_NodeServerMetadata.Methods.sendPay,
      Cln_NodeServerMetadata.Methods.listChannels,
      Cln_NodeServerMetadata.Methods.addGossip,
      Cln_NodeServerMetadata.Methods.autoCleanInvoice,
      Cln_NodeServerMetadata.Methods.checkMessage,
      Cln_NodeServerMetadata.Methods.close,
      Cln_NodeServerMetadata.Methods.connectPeer,
      Cln_NodeServerMetadata.Methods.createInvoice,
      Cln_NodeServerMetadata.Methods.datastore,
      Cln_NodeServerMetadata.Methods.createOnion,
      Cln_NodeServerMetadata.Methods.delDatastore,
      Cln_NodeServerMetadata.Methods.delExpiredInvoice,
      Cln_NodeServerMetadata.Methods.delInvoice,
      Cln_NodeServerMetadata.Methods.invoice,
      Cln_NodeServerMetadata.Methods.listDatastore,
      Cln_NodeServerMetadata.Methods.listInvoices,
      Cln_NodeServerMetadata.Methods.sendOnion,
      Cln_NodeServerMetadata.Methods.listSendPays,
      Cln_NodeServerMetadata.Methods.listTransactions,
      Cln_NodeServerMetadata.Methods.pay,
      Cln_NodeServerMetadata.Methods.listNodes,
      Cln_NodeServerMetadata.Methods.waitAnyInvoice,
      Cln_NodeServerMetadata.Methods.waitInvoice,
      Cln_NodeServerMetadata.Methods.waitSendPay,
      Cln_NodeServerMetadata.Methods.newAddr,
      Cln_NodeServerMetadata.Methods.withdraw,
      Cln_NodeServerMetadata.Methods.keySend,
      Cln_NodeServerMetadata.Methods.fundPsbt,
      Cln_NodeServerMetadata.Methods.sendPsbt,
      Cln_NodeServerMetadata.Methods.signPsbt,
      Cln_NodeServerMetadata.Methods.utxoPsbt,
      Cln_NodeServerMetadata.Methods.txDiscard,
      Cln_NodeServerMetadata.Methods.txPrepare,
      Cln_NodeServerMetadata.Methods.txSend,
      Cln_NodeServerMetadata.Methods.listPeerChannels,
      Cln_NodeServerMetadata.Methods.listClosedChannels,
      Cln_NodeServerMetadata.Methods.decodePay,
      Cln_NodeServerMetadata.Methods.decode,
      Cln_NodeServerMetadata.Methods.disconnect,
      Cln_NodeServerMetadata.Methods.feerates,
      Cln_NodeServerMetadata.Methods.fundChannel,
      Cln_NodeServerMetadata.Methods.getRoute,
      Cln_NodeServerMetadata.Methods.listForwards,
      Cln_NodeServerMetadata.Methods.listPays,
      Cln_NodeServerMetadata.Methods.listHtlcs,
      Cln_NodeServerMetadata.Methods.ping,
      Cln_NodeServerMetadata.Methods.sendCustomMsg,
      Cln_NodeServerMetadata.Methods.setChannel,
      Cln_NodeServerMetadata.Methods.signInvoice,
      Cln_NodeServerMetadata.Methods.signMessage,
      Cln_NodeServerMetadata.Methods.stop,
      Cln_NodeServerMetadata.Methods.preApproveKeysend,
      Cln_NodeServerMetadata.Methods.preApproveInvoice,
      Cln_NodeServerMetadata.Methods.staticBackup,
    ]
  )

  internal enum Methods {
    internal static let getinfo = GRPCMethodDescriptor(
      name: "Getinfo",
      path: "/cln.Node/Getinfo",
      type: GRPCCallType.unary
    )

    internal static let listPeers = GRPCMethodDescriptor(
      name: "ListPeers",
      path: "/cln.Node/ListPeers",
      type: GRPCCallType.unary
    )

    internal static let listFunds = GRPCMethodDescriptor(
      name: "ListFunds",
      path: "/cln.Node/ListFunds",
      type: GRPCCallType.unary
    )

    internal static let sendPay = GRPCMethodDescriptor(
      name: "SendPay",
      path: "/cln.Node/SendPay",
      type: GRPCCallType.unary
    )

    internal static let listChannels = GRPCMethodDescriptor(
      name: "ListChannels",
      path: "/cln.Node/ListChannels",
      type: GRPCCallType.unary
    )

    internal static let addGossip = GRPCMethodDescriptor(
      name: "AddGossip",
      path: "/cln.Node/AddGossip",
      type: GRPCCallType.unary
    )

    internal static let autoCleanInvoice = GRPCMethodDescriptor(
      name: "AutoCleanInvoice",
      path: "/cln.Node/AutoCleanInvoice",
      type: GRPCCallType.unary
    )

    internal static let checkMessage = GRPCMethodDescriptor(
      name: "CheckMessage",
      path: "/cln.Node/CheckMessage",
      type: GRPCCallType.unary
    )

    internal static let close = GRPCMethodDescriptor(
      name: "Close",
      path: "/cln.Node/Close",
      type: GRPCCallType.unary
    )

    internal static let connectPeer = GRPCMethodDescriptor(
      name: "ConnectPeer",
      path: "/cln.Node/ConnectPeer",
      type: GRPCCallType.unary
    )

    internal static let createInvoice = GRPCMethodDescriptor(
      name: "CreateInvoice",
      path: "/cln.Node/CreateInvoice",
      type: GRPCCallType.unary
    )

    internal static let datastore = GRPCMethodDescriptor(
      name: "Datastore",
      path: "/cln.Node/Datastore",
      type: GRPCCallType.unary
    )

    internal static let createOnion = GRPCMethodDescriptor(
      name: "CreateOnion",
      path: "/cln.Node/CreateOnion",
      type: GRPCCallType.unary
    )

    internal static let delDatastore = GRPCMethodDescriptor(
      name: "DelDatastore",
      path: "/cln.Node/DelDatastore",
      type: GRPCCallType.unary
    )

    internal static let delExpiredInvoice = GRPCMethodDescriptor(
      name: "DelExpiredInvoice",
      path: "/cln.Node/DelExpiredInvoice",
      type: GRPCCallType.unary
    )

    internal static let delInvoice = GRPCMethodDescriptor(
      name: "DelInvoice",
      path: "/cln.Node/DelInvoice",
      type: GRPCCallType.unary
    )

    internal static let invoice = GRPCMethodDescriptor(
      name: "Invoice",
      path: "/cln.Node/Invoice",
      type: GRPCCallType.unary
    )

    internal static let listDatastore = GRPCMethodDescriptor(
      name: "ListDatastore",
      path: "/cln.Node/ListDatastore",
      type: GRPCCallType.unary
    )

    internal static let listInvoices = GRPCMethodDescriptor(
      name: "ListInvoices",
      path: "/cln.Node/ListInvoices",
      type: GRPCCallType.unary
    )

    internal static let sendOnion = GRPCMethodDescriptor(
      name: "SendOnion",
      path: "/cln.Node/SendOnion",
      type: GRPCCallType.unary
    )

    internal static let listSendPays = GRPCMethodDescriptor(
      name: "ListSendPays",
      path: "/cln.Node/ListSendPays",
      type: GRPCCallType.unary
    )

    internal static let listTransactions = GRPCMethodDescriptor(
      name: "ListTransactions",
      path: "/cln.Node/ListTransactions",
      type: GRPCCallType.unary
    )

    internal static let pay = GRPCMethodDescriptor(
      name: "Pay",
      path: "/cln.Node/Pay",
      type: GRPCCallType.unary
    )

    internal static let listNodes = GRPCMethodDescriptor(
      name: "ListNodes",
      path: "/cln.Node/ListNodes",
      type: GRPCCallType.unary
    )

    internal static let waitAnyInvoice = GRPCMethodDescriptor(
      name: "WaitAnyInvoice",
      path: "/cln.Node/WaitAnyInvoice",
      type: GRPCCallType.unary
    )

    internal static let waitInvoice = GRPCMethodDescriptor(
      name: "WaitInvoice",
      path: "/cln.Node/WaitInvoice",
      type: GRPCCallType.unary
    )

    internal static let waitSendPay = GRPCMethodDescriptor(
      name: "WaitSendPay",
      path: "/cln.Node/WaitSendPay",
      type: GRPCCallType.unary
    )

    internal static let newAddr = GRPCMethodDescriptor(
      name: "NewAddr",
      path: "/cln.Node/NewAddr",
      type: GRPCCallType.unary
    )

    internal static let withdraw = GRPCMethodDescriptor(
      name: "Withdraw",
      path: "/cln.Node/Withdraw",
      type: GRPCCallType.unary
    )

    internal static let keySend = GRPCMethodDescriptor(
      name: "KeySend",
      path: "/cln.Node/KeySend",
      type: GRPCCallType.unary
    )

    internal static let fundPsbt = GRPCMethodDescriptor(
      name: "FundPsbt",
      path: "/cln.Node/FundPsbt",
      type: GRPCCallType.unary
    )

    internal static let sendPsbt = GRPCMethodDescriptor(
      name: "SendPsbt",
      path: "/cln.Node/SendPsbt",
      type: GRPCCallType.unary
    )

    internal static let signPsbt = GRPCMethodDescriptor(
      name: "SignPsbt",
      path: "/cln.Node/SignPsbt",
      type: GRPCCallType.unary
    )

    internal static let utxoPsbt = GRPCMethodDescriptor(
      name: "UtxoPsbt",
      path: "/cln.Node/UtxoPsbt",
      type: GRPCCallType.unary
    )

    internal static let txDiscard = GRPCMethodDescriptor(
      name: "TxDiscard",
      path: "/cln.Node/TxDiscard",
      type: GRPCCallType.unary
    )

    internal static let txPrepare = GRPCMethodDescriptor(
      name: "TxPrepare",
      path: "/cln.Node/TxPrepare",
      type: GRPCCallType.unary
    )

    internal static let txSend = GRPCMethodDescriptor(
      name: "TxSend",
      path: "/cln.Node/TxSend",
      type: GRPCCallType.unary
    )

    internal static let listPeerChannels = GRPCMethodDescriptor(
      name: "ListPeerChannels",
      path: "/cln.Node/ListPeerChannels",
      type: GRPCCallType.unary
    )

    internal static let listClosedChannels = GRPCMethodDescriptor(
      name: "ListClosedChannels",
      path: "/cln.Node/ListClosedChannels",
      type: GRPCCallType.unary
    )

    internal static let decodePay = GRPCMethodDescriptor(
      name: "DecodePay",
      path: "/cln.Node/DecodePay",
      type: GRPCCallType.unary
    )

    internal static let decode = GRPCMethodDescriptor(
      name: "Decode",
      path: "/cln.Node/Decode",
      type: GRPCCallType.unary
    )

    internal static let disconnect = GRPCMethodDescriptor(
      name: "Disconnect",
      path: "/cln.Node/Disconnect",
      type: GRPCCallType.unary
    )

    internal static let feerates = GRPCMethodDescriptor(
      name: "Feerates",
      path: "/cln.Node/Feerates",
      type: GRPCCallType.unary
    )

    internal static let fundChannel = GRPCMethodDescriptor(
      name: "FundChannel",
      path: "/cln.Node/FundChannel",
      type: GRPCCallType.unary
    )

    internal static let getRoute = GRPCMethodDescriptor(
      name: "GetRoute",
      path: "/cln.Node/GetRoute",
      type: GRPCCallType.unary
    )

    internal static let listForwards = GRPCMethodDescriptor(
      name: "ListForwards",
      path: "/cln.Node/ListForwards",
      type: GRPCCallType.unary
    )

    internal static let listPays = GRPCMethodDescriptor(
      name: "ListPays",
      path: "/cln.Node/ListPays",
      type: GRPCCallType.unary
    )

    internal static let listHtlcs = GRPCMethodDescriptor(
      name: "ListHtlcs",
      path: "/cln.Node/ListHtlcs",
      type: GRPCCallType.unary
    )

    internal static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/cln.Node/Ping",
      type: GRPCCallType.unary
    )

    internal static let sendCustomMsg = GRPCMethodDescriptor(
      name: "SendCustomMsg",
      path: "/cln.Node/SendCustomMsg",
      type: GRPCCallType.unary
    )

    internal static let setChannel = GRPCMethodDescriptor(
      name: "SetChannel",
      path: "/cln.Node/SetChannel",
      type: GRPCCallType.unary
    )

    internal static let signInvoice = GRPCMethodDescriptor(
      name: "SignInvoice",
      path: "/cln.Node/SignInvoice",
      type: GRPCCallType.unary
    )

    internal static let signMessage = GRPCMethodDescriptor(
      name: "SignMessage",
      path: "/cln.Node/SignMessage",
      type: GRPCCallType.unary
    )

    internal static let stop = GRPCMethodDescriptor(
      name: "Stop",
      path: "/cln.Node/Stop",
      type: GRPCCallType.unary
    )

    internal static let preApproveKeysend = GRPCMethodDescriptor(
      name: "PreApproveKeysend",
      path: "/cln.Node/PreApproveKeysend",
      type: GRPCCallType.unary
    )

    internal static let preApproveInvoice = GRPCMethodDescriptor(
      name: "PreApproveInvoice",
      path: "/cln.Node/PreApproveInvoice",
      type: GRPCCallType.unary
    )

    internal static let staticBackup = GRPCMethodDescriptor(
      name: "StaticBackup",
      path: "/cln.Node/StaticBackup",
      type: GRPCCallType.unary
    )
  }
}
